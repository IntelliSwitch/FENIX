// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module CNN_stream_reshape_concate_layer_stream (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        conv_out3_0_0_dout,
        conv_out3_0_0_empty_n,
        conv_out3_0_0_read,
        conv_out3_0_0_num_data_valid,
        conv_out3_0_0_fifo_cap,
        conv_out3_0_1_dout,
        conv_out3_0_1_empty_n,
        conv_out3_0_1_read,
        conv_out3_0_1_num_data_valid,
        conv_out3_0_1_fifo_cap,
        conv_out3_0_2_dout,
        conv_out3_0_2_empty_n,
        conv_out3_0_2_read,
        conv_out3_0_2_num_data_valid,
        conv_out3_0_2_fifo_cap,
        conv_out3_0_3_dout,
        conv_out3_0_3_empty_n,
        conv_out3_0_3_read,
        conv_out3_0_3_num_data_valid,
        conv_out3_0_3_fifo_cap,
        conv_out3_0_4_dout,
        conv_out3_0_4_empty_n,
        conv_out3_0_4_read,
        conv_out3_0_4_num_data_valid,
        conv_out3_0_4_fifo_cap,
        conv_out3_0_5_dout,
        conv_out3_0_5_empty_n,
        conv_out3_0_5_read,
        conv_out3_0_5_num_data_valid,
        conv_out3_0_5_fifo_cap,
        conv_out3_0_6_dout,
        conv_out3_0_6_empty_n,
        conv_out3_0_6_read,
        conv_out3_0_6_num_data_valid,
        conv_out3_0_6_fifo_cap,
        conv_out3_1_0_dout,
        conv_out3_1_0_empty_n,
        conv_out3_1_0_read,
        conv_out3_1_0_num_data_valid,
        conv_out3_1_0_fifo_cap,
        conv_out3_1_1_dout,
        conv_out3_1_1_empty_n,
        conv_out3_1_1_read,
        conv_out3_1_1_num_data_valid,
        conv_out3_1_1_fifo_cap,
        conv_out3_1_2_dout,
        conv_out3_1_2_empty_n,
        conv_out3_1_2_read,
        conv_out3_1_2_num_data_valid,
        conv_out3_1_2_fifo_cap,
        conv_out3_1_3_dout,
        conv_out3_1_3_empty_n,
        conv_out3_1_3_read,
        conv_out3_1_3_num_data_valid,
        conv_out3_1_3_fifo_cap,
        conv_out3_1_4_dout,
        conv_out3_1_4_empty_n,
        conv_out3_1_4_read,
        conv_out3_1_4_num_data_valid,
        conv_out3_1_4_fifo_cap,
        conv_out3_1_5_dout,
        conv_out3_1_5_empty_n,
        conv_out3_1_5_read,
        conv_out3_1_5_num_data_valid,
        conv_out3_1_5_fifo_cap,
        conv_out3_1_6_dout,
        conv_out3_1_6_empty_n,
        conv_out3_1_6_read,
        conv_out3_1_6_num_data_valid,
        conv_out3_1_6_fifo_cap,
        conv_out4_0_0_dout,
        conv_out4_0_0_empty_n,
        conv_out4_0_0_read,
        conv_out4_0_0_num_data_valid,
        conv_out4_0_0_fifo_cap,
        conv_out4_0_1_dout,
        conv_out4_0_1_empty_n,
        conv_out4_0_1_read,
        conv_out4_0_1_num_data_valid,
        conv_out4_0_1_fifo_cap,
        conv_out4_0_2_dout,
        conv_out4_0_2_empty_n,
        conv_out4_0_2_read,
        conv_out4_0_2_num_data_valid,
        conv_out4_0_2_fifo_cap,
        conv_out4_0_3_dout,
        conv_out4_0_3_empty_n,
        conv_out4_0_3_read,
        conv_out4_0_3_num_data_valid,
        conv_out4_0_3_fifo_cap,
        conv_out4_0_4_dout,
        conv_out4_0_4_empty_n,
        conv_out4_0_4_read,
        conv_out4_0_4_num_data_valid,
        conv_out4_0_4_fifo_cap,
        conv_out4_0_5_dout,
        conv_out4_0_5_empty_n,
        conv_out4_0_5_read,
        conv_out4_0_5_num_data_valid,
        conv_out4_0_5_fifo_cap,
        conv_out4_1_0_dout,
        conv_out4_1_0_empty_n,
        conv_out4_1_0_read,
        conv_out4_1_0_num_data_valid,
        conv_out4_1_0_fifo_cap,
        conv_out4_1_1_dout,
        conv_out4_1_1_empty_n,
        conv_out4_1_1_read,
        conv_out4_1_1_num_data_valid,
        conv_out4_1_1_fifo_cap,
        conv_out4_1_2_dout,
        conv_out4_1_2_empty_n,
        conv_out4_1_2_read,
        conv_out4_1_2_num_data_valid,
        conv_out4_1_2_fifo_cap,
        conv_out4_1_3_dout,
        conv_out4_1_3_empty_n,
        conv_out4_1_3_read,
        conv_out4_1_3_num_data_valid,
        conv_out4_1_3_fifo_cap,
        conv_out4_1_4_dout,
        conv_out4_1_4_empty_n,
        conv_out4_1_4_read,
        conv_out4_1_4_num_data_valid,
        conv_out4_1_4_fifo_cap,
        conv_out4_1_5_dout,
        conv_out4_1_5_empty_n,
        conv_out4_1_5_read,
        conv_out4_1_5_num_data_valid,
        conv_out4_1_5_fifo_cap,
        conv_out5_0_0_dout,
        conv_out5_0_0_empty_n,
        conv_out5_0_0_read,
        conv_out5_0_0_num_data_valid,
        conv_out5_0_0_fifo_cap,
        conv_out5_0_1_dout,
        conv_out5_0_1_empty_n,
        conv_out5_0_1_read,
        conv_out5_0_1_num_data_valid,
        conv_out5_0_1_fifo_cap,
        conv_out5_0_2_dout,
        conv_out5_0_2_empty_n,
        conv_out5_0_2_read,
        conv_out5_0_2_num_data_valid,
        conv_out5_0_2_fifo_cap,
        conv_out5_0_3_dout,
        conv_out5_0_3_empty_n,
        conv_out5_0_3_read,
        conv_out5_0_3_num_data_valid,
        conv_out5_0_3_fifo_cap,
        conv_out5_0_4_dout,
        conv_out5_0_4_empty_n,
        conv_out5_0_4_read,
        conv_out5_0_4_num_data_valid,
        conv_out5_0_4_fifo_cap,
        conv_out5_1_0_dout,
        conv_out5_1_0_empty_n,
        conv_out5_1_0_read,
        conv_out5_1_0_num_data_valid,
        conv_out5_1_0_fifo_cap,
        conv_out5_1_1_dout,
        conv_out5_1_1_empty_n,
        conv_out5_1_1_read,
        conv_out5_1_1_num_data_valid,
        conv_out5_1_1_fifo_cap,
        conv_out5_1_2_dout,
        conv_out5_1_2_empty_n,
        conv_out5_1_2_read,
        conv_out5_1_2_num_data_valid,
        conv_out5_1_2_fifo_cap,
        conv_out5_1_3_dout,
        conv_out5_1_3_empty_n,
        conv_out5_1_3_read,
        conv_out5_1_3_num_data_valid,
        conv_out5_1_3_fifo_cap,
        conv_out5_1_4_dout,
        conv_out5_1_4_empty_n,
        conv_out5_1_4_read,
        conv_out5_1_4_num_data_valid,
        conv_out5_1_4_fifo_cap,
        feature2_embedding_din,
        feature2_embedding_full_n,
        feature2_embedding_write,
        feature2_embedding_num_data_valid,
        feature2_embedding_fifo_cap
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] conv_out3_0_0_dout;
input   conv_out3_0_0_empty_n;
output   conv_out3_0_0_read;
input  [2:0] conv_out3_0_0_num_data_valid;
input  [2:0] conv_out3_0_0_fifo_cap;
input  [31:0] conv_out3_0_1_dout;
input   conv_out3_0_1_empty_n;
output   conv_out3_0_1_read;
input  [2:0] conv_out3_0_1_num_data_valid;
input  [2:0] conv_out3_0_1_fifo_cap;
input  [31:0] conv_out3_0_2_dout;
input   conv_out3_0_2_empty_n;
output   conv_out3_0_2_read;
input  [2:0] conv_out3_0_2_num_data_valid;
input  [2:0] conv_out3_0_2_fifo_cap;
input  [31:0] conv_out3_0_3_dout;
input   conv_out3_0_3_empty_n;
output   conv_out3_0_3_read;
input  [2:0] conv_out3_0_3_num_data_valid;
input  [2:0] conv_out3_0_3_fifo_cap;
input  [31:0] conv_out3_0_4_dout;
input   conv_out3_0_4_empty_n;
output   conv_out3_0_4_read;
input  [2:0] conv_out3_0_4_num_data_valid;
input  [2:0] conv_out3_0_4_fifo_cap;
input  [31:0] conv_out3_0_5_dout;
input   conv_out3_0_5_empty_n;
output   conv_out3_0_5_read;
input  [2:0] conv_out3_0_5_num_data_valid;
input  [2:0] conv_out3_0_5_fifo_cap;
input  [31:0] conv_out3_0_6_dout;
input   conv_out3_0_6_empty_n;
output   conv_out3_0_6_read;
input  [2:0] conv_out3_0_6_num_data_valid;
input  [2:0] conv_out3_0_6_fifo_cap;
input  [31:0] conv_out3_1_0_dout;
input   conv_out3_1_0_empty_n;
output   conv_out3_1_0_read;
input  [2:0] conv_out3_1_0_num_data_valid;
input  [2:0] conv_out3_1_0_fifo_cap;
input  [31:0] conv_out3_1_1_dout;
input   conv_out3_1_1_empty_n;
output   conv_out3_1_1_read;
input  [2:0] conv_out3_1_1_num_data_valid;
input  [2:0] conv_out3_1_1_fifo_cap;
input  [31:0] conv_out3_1_2_dout;
input   conv_out3_1_2_empty_n;
output   conv_out3_1_2_read;
input  [2:0] conv_out3_1_2_num_data_valid;
input  [2:0] conv_out3_1_2_fifo_cap;
input  [31:0] conv_out3_1_3_dout;
input   conv_out3_1_3_empty_n;
output   conv_out3_1_3_read;
input  [2:0] conv_out3_1_3_num_data_valid;
input  [2:0] conv_out3_1_3_fifo_cap;
input  [31:0] conv_out3_1_4_dout;
input   conv_out3_1_4_empty_n;
output   conv_out3_1_4_read;
input  [2:0] conv_out3_1_4_num_data_valid;
input  [2:0] conv_out3_1_4_fifo_cap;
input  [31:0] conv_out3_1_5_dout;
input   conv_out3_1_5_empty_n;
output   conv_out3_1_5_read;
input  [2:0] conv_out3_1_5_num_data_valid;
input  [2:0] conv_out3_1_5_fifo_cap;
input  [31:0] conv_out3_1_6_dout;
input   conv_out3_1_6_empty_n;
output   conv_out3_1_6_read;
input  [2:0] conv_out3_1_6_num_data_valid;
input  [2:0] conv_out3_1_6_fifo_cap;
input  [31:0] conv_out4_0_0_dout;
input   conv_out4_0_0_empty_n;
output   conv_out4_0_0_read;
input  [2:0] conv_out4_0_0_num_data_valid;
input  [2:0] conv_out4_0_0_fifo_cap;
input  [31:0] conv_out4_0_1_dout;
input   conv_out4_0_1_empty_n;
output   conv_out4_0_1_read;
input  [2:0] conv_out4_0_1_num_data_valid;
input  [2:0] conv_out4_0_1_fifo_cap;
input  [31:0] conv_out4_0_2_dout;
input   conv_out4_0_2_empty_n;
output   conv_out4_0_2_read;
input  [2:0] conv_out4_0_2_num_data_valid;
input  [2:0] conv_out4_0_2_fifo_cap;
input  [31:0] conv_out4_0_3_dout;
input   conv_out4_0_3_empty_n;
output   conv_out4_0_3_read;
input  [2:0] conv_out4_0_3_num_data_valid;
input  [2:0] conv_out4_0_3_fifo_cap;
input  [31:0] conv_out4_0_4_dout;
input   conv_out4_0_4_empty_n;
output   conv_out4_0_4_read;
input  [2:0] conv_out4_0_4_num_data_valid;
input  [2:0] conv_out4_0_4_fifo_cap;
input  [31:0] conv_out4_0_5_dout;
input   conv_out4_0_5_empty_n;
output   conv_out4_0_5_read;
input  [2:0] conv_out4_0_5_num_data_valid;
input  [2:0] conv_out4_0_5_fifo_cap;
input  [31:0] conv_out4_1_0_dout;
input   conv_out4_1_0_empty_n;
output   conv_out4_1_0_read;
input  [2:0] conv_out4_1_0_num_data_valid;
input  [2:0] conv_out4_1_0_fifo_cap;
input  [31:0] conv_out4_1_1_dout;
input   conv_out4_1_1_empty_n;
output   conv_out4_1_1_read;
input  [2:0] conv_out4_1_1_num_data_valid;
input  [2:0] conv_out4_1_1_fifo_cap;
input  [31:0] conv_out4_1_2_dout;
input   conv_out4_1_2_empty_n;
output   conv_out4_1_2_read;
input  [2:0] conv_out4_1_2_num_data_valid;
input  [2:0] conv_out4_1_2_fifo_cap;
input  [31:0] conv_out4_1_3_dout;
input   conv_out4_1_3_empty_n;
output   conv_out4_1_3_read;
input  [2:0] conv_out4_1_3_num_data_valid;
input  [2:0] conv_out4_1_3_fifo_cap;
input  [31:0] conv_out4_1_4_dout;
input   conv_out4_1_4_empty_n;
output   conv_out4_1_4_read;
input  [2:0] conv_out4_1_4_num_data_valid;
input  [2:0] conv_out4_1_4_fifo_cap;
input  [31:0] conv_out4_1_5_dout;
input   conv_out4_1_5_empty_n;
output   conv_out4_1_5_read;
input  [2:0] conv_out4_1_5_num_data_valid;
input  [2:0] conv_out4_1_5_fifo_cap;
input  [31:0] conv_out5_0_0_dout;
input   conv_out5_0_0_empty_n;
output   conv_out5_0_0_read;
input  [2:0] conv_out5_0_0_num_data_valid;
input  [2:0] conv_out5_0_0_fifo_cap;
input  [31:0] conv_out5_0_1_dout;
input   conv_out5_0_1_empty_n;
output   conv_out5_0_1_read;
input  [2:0] conv_out5_0_1_num_data_valid;
input  [2:0] conv_out5_0_1_fifo_cap;
input  [31:0] conv_out5_0_2_dout;
input   conv_out5_0_2_empty_n;
output   conv_out5_0_2_read;
input  [2:0] conv_out5_0_2_num_data_valid;
input  [2:0] conv_out5_0_2_fifo_cap;
input  [31:0] conv_out5_0_3_dout;
input   conv_out5_0_3_empty_n;
output   conv_out5_0_3_read;
input  [2:0] conv_out5_0_3_num_data_valid;
input  [2:0] conv_out5_0_3_fifo_cap;
input  [31:0] conv_out5_0_4_dout;
input   conv_out5_0_4_empty_n;
output   conv_out5_0_4_read;
input  [2:0] conv_out5_0_4_num_data_valid;
input  [2:0] conv_out5_0_4_fifo_cap;
input  [31:0] conv_out5_1_0_dout;
input   conv_out5_1_0_empty_n;
output   conv_out5_1_0_read;
input  [2:0] conv_out5_1_0_num_data_valid;
input  [2:0] conv_out5_1_0_fifo_cap;
input  [31:0] conv_out5_1_1_dout;
input   conv_out5_1_1_empty_n;
output   conv_out5_1_1_read;
input  [2:0] conv_out5_1_1_num_data_valid;
input  [2:0] conv_out5_1_1_fifo_cap;
input  [31:0] conv_out5_1_2_dout;
input   conv_out5_1_2_empty_n;
output   conv_out5_1_2_read;
input  [2:0] conv_out5_1_2_num_data_valid;
input  [2:0] conv_out5_1_2_fifo_cap;
input  [31:0] conv_out5_1_3_dout;
input   conv_out5_1_3_empty_n;
output   conv_out5_1_3_read;
input  [2:0] conv_out5_1_3_num_data_valid;
input  [2:0] conv_out5_1_3_fifo_cap;
input  [31:0] conv_out5_1_4_dout;
input   conv_out5_1_4_empty_n;
output   conv_out5_1_4_read;
input  [2:0] conv_out5_1_4_num_data_valid;
input  [2:0] conv_out5_1_4_fifo_cap;
output  [1151:0] feature2_embedding_din;
input   feature2_embedding_full_n;
output   feature2_embedding_write;
input  [2:0] feature2_embedding_num_data_valid;
input  [2:0] feature2_embedding_fifo_cap;

reg ap_done;
reg ap_idle;
reg start_write;
reg conv_out3_0_0_read;
reg conv_out3_0_1_read;
reg conv_out3_0_2_read;
reg conv_out3_0_3_read;
reg conv_out3_0_4_read;
reg conv_out3_0_5_read;
reg conv_out3_0_6_read;
reg conv_out3_1_0_read;
reg conv_out3_1_1_read;
reg conv_out3_1_2_read;
reg conv_out3_1_3_read;
reg conv_out3_1_4_read;
reg conv_out3_1_5_read;
reg conv_out3_1_6_read;
reg conv_out4_0_0_read;
reg conv_out4_0_1_read;
reg conv_out4_0_2_read;
reg conv_out4_0_3_read;
reg conv_out4_0_4_read;
reg conv_out4_0_5_read;
reg conv_out4_1_0_read;
reg conv_out4_1_1_read;
reg conv_out4_1_2_read;
reg conv_out4_1_3_read;
reg conv_out4_1_4_read;
reg conv_out4_1_5_read;
reg conv_out5_0_0_read;
reg conv_out5_0_1_read;
reg conv_out5_0_2_read;
reg conv_out5_0_3_read;
reg conv_out5_0_4_read;
reg conv_out5_1_0_read;
reg conv_out5_1_1_read;
reg conv_out5_1_2_read;
reg conv_out5_1_3_read;
reg conv_out5_1_4_read;
reg feature2_embedding_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    conv_out3_0_0_blk_n;
reg    conv_out3_0_1_blk_n;
reg    conv_out3_0_2_blk_n;
reg    conv_out3_0_3_blk_n;
reg    conv_out3_0_4_blk_n;
reg    conv_out3_0_5_blk_n;
reg    conv_out3_0_6_blk_n;
reg    conv_out3_1_0_blk_n;
reg    conv_out3_1_1_blk_n;
reg    conv_out3_1_2_blk_n;
reg    conv_out3_1_3_blk_n;
reg    conv_out3_1_4_blk_n;
reg    conv_out3_1_5_blk_n;
reg    conv_out3_1_6_blk_n;
reg    conv_out4_0_0_blk_n;
reg    conv_out4_0_1_blk_n;
reg    conv_out4_0_2_blk_n;
reg    conv_out4_0_3_blk_n;
reg    conv_out4_0_4_blk_n;
reg    conv_out4_0_5_blk_n;
reg    conv_out4_1_0_blk_n;
reg    conv_out4_1_1_blk_n;
reg    conv_out4_1_2_blk_n;
reg    conv_out4_1_3_blk_n;
reg    conv_out4_1_4_blk_n;
reg    conv_out4_1_5_blk_n;
reg    conv_out5_0_0_blk_n;
reg    conv_out5_0_1_blk_n;
reg    conv_out5_0_2_blk_n;
reg    conv_out5_0_3_blk_n;
reg    conv_out5_0_4_blk_n;
reg    conv_out5_1_0_blk_n;
reg    conv_out5_1_1_blk_n;
reg    conv_out5_1_2_blk_n;
reg    conv_out5_1_3_blk_n;
reg    conv_out5_1_4_blk_n;
reg    feature2_embedding_blk_n;
reg    ap_block_state1;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out3_0_0_blk_n = conv_out3_0_0_empty_n;
    end else begin
        conv_out3_0_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out3_0_0_read = 1'b1;
    end else begin
        conv_out3_0_0_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out3_0_1_blk_n = conv_out3_0_1_empty_n;
    end else begin
        conv_out3_0_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out3_0_1_read = 1'b1;
    end else begin
        conv_out3_0_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out3_0_2_blk_n = conv_out3_0_2_empty_n;
    end else begin
        conv_out3_0_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out3_0_2_read = 1'b1;
    end else begin
        conv_out3_0_2_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out3_0_3_blk_n = conv_out3_0_3_empty_n;
    end else begin
        conv_out3_0_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out3_0_3_read = 1'b1;
    end else begin
        conv_out3_0_3_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out3_0_4_blk_n = conv_out3_0_4_empty_n;
    end else begin
        conv_out3_0_4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out3_0_4_read = 1'b1;
    end else begin
        conv_out3_0_4_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out3_0_5_blk_n = conv_out3_0_5_empty_n;
    end else begin
        conv_out3_0_5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out3_0_5_read = 1'b1;
    end else begin
        conv_out3_0_5_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out3_0_6_blk_n = conv_out3_0_6_empty_n;
    end else begin
        conv_out3_0_6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out3_0_6_read = 1'b1;
    end else begin
        conv_out3_0_6_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out3_1_0_blk_n = conv_out3_1_0_empty_n;
    end else begin
        conv_out3_1_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out3_1_0_read = 1'b1;
    end else begin
        conv_out3_1_0_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out3_1_1_blk_n = conv_out3_1_1_empty_n;
    end else begin
        conv_out3_1_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out3_1_1_read = 1'b1;
    end else begin
        conv_out3_1_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out3_1_2_blk_n = conv_out3_1_2_empty_n;
    end else begin
        conv_out3_1_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out3_1_2_read = 1'b1;
    end else begin
        conv_out3_1_2_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out3_1_3_blk_n = conv_out3_1_3_empty_n;
    end else begin
        conv_out3_1_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out3_1_3_read = 1'b1;
    end else begin
        conv_out3_1_3_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out3_1_4_blk_n = conv_out3_1_4_empty_n;
    end else begin
        conv_out3_1_4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out3_1_4_read = 1'b1;
    end else begin
        conv_out3_1_4_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out3_1_5_blk_n = conv_out3_1_5_empty_n;
    end else begin
        conv_out3_1_5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out3_1_5_read = 1'b1;
    end else begin
        conv_out3_1_5_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out3_1_6_blk_n = conv_out3_1_6_empty_n;
    end else begin
        conv_out3_1_6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out3_1_6_read = 1'b1;
    end else begin
        conv_out3_1_6_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out4_0_0_blk_n = conv_out4_0_0_empty_n;
    end else begin
        conv_out4_0_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out4_0_0_read = 1'b1;
    end else begin
        conv_out4_0_0_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out4_0_1_blk_n = conv_out4_0_1_empty_n;
    end else begin
        conv_out4_0_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out4_0_1_read = 1'b1;
    end else begin
        conv_out4_0_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out4_0_2_blk_n = conv_out4_0_2_empty_n;
    end else begin
        conv_out4_0_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out4_0_2_read = 1'b1;
    end else begin
        conv_out4_0_2_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out4_0_3_blk_n = conv_out4_0_3_empty_n;
    end else begin
        conv_out4_0_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out4_0_3_read = 1'b1;
    end else begin
        conv_out4_0_3_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out4_0_4_blk_n = conv_out4_0_4_empty_n;
    end else begin
        conv_out4_0_4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out4_0_4_read = 1'b1;
    end else begin
        conv_out4_0_4_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out4_0_5_blk_n = conv_out4_0_5_empty_n;
    end else begin
        conv_out4_0_5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out4_0_5_read = 1'b1;
    end else begin
        conv_out4_0_5_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out4_1_0_blk_n = conv_out4_1_0_empty_n;
    end else begin
        conv_out4_1_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out4_1_0_read = 1'b1;
    end else begin
        conv_out4_1_0_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out4_1_1_blk_n = conv_out4_1_1_empty_n;
    end else begin
        conv_out4_1_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out4_1_1_read = 1'b1;
    end else begin
        conv_out4_1_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out4_1_2_blk_n = conv_out4_1_2_empty_n;
    end else begin
        conv_out4_1_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out4_1_2_read = 1'b1;
    end else begin
        conv_out4_1_2_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out4_1_3_blk_n = conv_out4_1_3_empty_n;
    end else begin
        conv_out4_1_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out4_1_3_read = 1'b1;
    end else begin
        conv_out4_1_3_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out4_1_4_blk_n = conv_out4_1_4_empty_n;
    end else begin
        conv_out4_1_4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out4_1_4_read = 1'b1;
    end else begin
        conv_out4_1_4_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out4_1_5_blk_n = conv_out4_1_5_empty_n;
    end else begin
        conv_out4_1_5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out4_1_5_read = 1'b1;
    end else begin
        conv_out4_1_5_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out5_0_0_blk_n = conv_out5_0_0_empty_n;
    end else begin
        conv_out5_0_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out5_0_0_read = 1'b1;
    end else begin
        conv_out5_0_0_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out5_0_1_blk_n = conv_out5_0_1_empty_n;
    end else begin
        conv_out5_0_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out5_0_1_read = 1'b1;
    end else begin
        conv_out5_0_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out5_0_2_blk_n = conv_out5_0_2_empty_n;
    end else begin
        conv_out5_0_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out5_0_2_read = 1'b1;
    end else begin
        conv_out5_0_2_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out5_0_3_blk_n = conv_out5_0_3_empty_n;
    end else begin
        conv_out5_0_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out5_0_3_read = 1'b1;
    end else begin
        conv_out5_0_3_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out5_0_4_blk_n = conv_out5_0_4_empty_n;
    end else begin
        conv_out5_0_4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out5_0_4_read = 1'b1;
    end else begin
        conv_out5_0_4_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out5_1_0_blk_n = conv_out5_1_0_empty_n;
    end else begin
        conv_out5_1_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out5_1_0_read = 1'b1;
    end else begin
        conv_out5_1_0_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out5_1_1_blk_n = conv_out5_1_1_empty_n;
    end else begin
        conv_out5_1_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out5_1_1_read = 1'b1;
    end else begin
        conv_out5_1_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out5_1_2_blk_n = conv_out5_1_2_empty_n;
    end else begin
        conv_out5_1_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out5_1_2_read = 1'b1;
    end else begin
        conv_out5_1_2_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out5_1_3_blk_n = conv_out5_1_3_empty_n;
    end else begin
        conv_out5_1_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out5_1_3_read = 1'b1;
    end else begin
        conv_out5_1_3_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out5_1_4_blk_n = conv_out5_1_4_empty_n;
    end else begin
        conv_out5_1_4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        conv_out5_1_4_read = 1'b1;
    end else begin
        conv_out5_1_4_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        feature2_embedding_blk_n = feature2_embedding_full_n;
    end else begin
        feature2_embedding_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        feature2_embedding_write = 1'b1;
    end else begin
        feature2_embedding_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((conv_out3_1_3_empty_n == 1'b0) | (conv_out3_1_2_empty_n == 1'b0) | (conv_out3_1_1_empty_n == 1'b0) | (conv_out3_1_0_empty_n == 1'b0) | (real_start == 1'b0) | (conv_out3_0_6_empty_n == 1'b0) | (conv_out3_0_5_empty_n == 1'b0) | (conv_out3_0_4_empty_n == 1'b0) | (conv_out3_0_3_empty_n == 1'b0) | (conv_out3_0_2_empty_n == 1'b0) | (conv_out3_0_1_empty_n == 1'b0) | (conv_out3_0_0_empty_n == 1'b0) | (feature2_embedding_full_n == 1'b0) | (conv_out5_1_4_empty_n == 1'b0) | (conv_out5_1_3_empty_n == 1'b0) | (conv_out5_1_2_empty_n == 1'b0) | (conv_out5_1_1_empty_n == 1'b0) | (conv_out5_1_0_empty_n == 1'b0) | (conv_out5_0_4_empty_n == 1'b0) | (conv_out5_0_3_empty_n == 1'b0) | (conv_out5_0_2_empty_n == 1'b0) | (conv_out5_0_1_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (conv_out5_0_0_empty_n == 1'b0) | (conv_out4_1_5_empty_n == 1'b0) | (conv_out4_1_4_empty_n == 1'b0) | (conv_out4_1_3_empty_n == 1'b0) | (conv_out4_1_2_empty_n == 1'b0) | (conv_out4_1_1_empty_n == 1'b0) | (conv_out4_1_0_empty_n == 1'b0) | (conv_out4_0_5_empty_n 
    == 1'b0) | (conv_out4_0_4_empty_n == 1'b0) | (conv_out4_0_3_empty_n == 1'b0) | (conv_out4_0_2_empty_n == 1'b0) | (conv_out4_0_1_empty_n == 1'b0) | (conv_out4_0_0_empty_n == 1'b0) | (conv_out3_1_6_empty_n == 1'b0) | (conv_out3_1_5_empty_n == 1'b0) | (conv_out3_1_4_empty_n == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign feature2_embedding_din = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{conv_out5_1_4_dout}, {conv_out5_1_3_dout}}, {conv_out5_1_2_dout}}, {conv_out5_1_1_dout}}, {conv_out5_1_0_dout}}, {conv_out5_0_4_dout}}, {conv_out5_0_3_dout}}, {conv_out5_0_2_dout}}, {conv_out5_0_1_dout}}, {conv_out5_0_0_dout}}, {conv_out4_1_5_dout}}, {conv_out4_1_4_dout}}, {conv_out4_1_3_dout}}, {conv_out4_1_2_dout}}, {conv_out4_1_1_dout}}, {conv_out4_1_0_dout}}, {conv_out4_0_5_dout}}, {conv_out4_0_4_dout}}, {conv_out4_0_3_dout}}, {conv_out4_0_2_dout}}, {conv_out4_0_1_dout}}, {conv_out4_0_0_dout}}, {conv_out3_1_6_dout}}, {conv_out3_1_5_dout}}, {conv_out3_1_4_dout}}, {conv_out3_1_3_dout}}, {conv_out3_1_2_dout}}, {conv_out3_1_1_dout}}, {conv_out3_1_0_dout}}, {conv_out3_0_6_dout}}, {conv_out3_0_5_dout}}, {conv_out3_0_4_dout}}, {conv_out3_0_3_dout}}, {conv_out3_0_2_dout}}, {conv_out3_0_1_dout}}, {conv_out3_0_0_dout}};

assign start_out = real_start;

endmodule //CNN_stream_reshape_concate_layer_stream

// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module CNN_stream_feature_concate_layer_stream_9u_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        len_x_embedding_0_dout,
        len_x_embedding_0_empty_n,
        len_x_embedding_0_read,
        len_x_embedding_0_num_data_valid,
        len_x_embedding_0_fifo_cap,
        len_x_embedding_1_dout,
        len_x_embedding_1_empty_n,
        len_x_embedding_1_read,
        len_x_embedding_1_num_data_valid,
        len_x_embedding_1_fifo_cap,
        len_x_embedding_2_dout,
        len_x_embedding_2_empty_n,
        len_x_embedding_2_read,
        len_x_embedding_2_num_data_valid,
        len_x_embedding_2_fifo_cap,
        len_x_embedding_3_dout,
        len_x_embedding_3_empty_n,
        len_x_embedding_3_read,
        len_x_embedding_3_num_data_valid,
        len_x_embedding_3_fifo_cap,
        len_x_embedding_4_dout,
        len_x_embedding_4_empty_n,
        len_x_embedding_4_read,
        len_x_embedding_4_num_data_valid,
        len_x_embedding_4_fifo_cap,
        len_x_embedding_5_dout,
        len_x_embedding_5_empty_n,
        len_x_embedding_5_read,
        len_x_embedding_5_num_data_valid,
        len_x_embedding_5_fifo_cap,
        len_x_embedding_6_dout,
        len_x_embedding_6_empty_n,
        len_x_embedding_6_read,
        len_x_embedding_6_num_data_valid,
        len_x_embedding_6_fifo_cap,
        len_x_embedding_7_dout,
        len_x_embedding_7_empty_n,
        len_x_embedding_7_read,
        len_x_embedding_7_num_data_valid,
        len_x_embedding_7_fifo_cap,
        len_x_embedding_8_dout,
        len_x_embedding_8_empty_n,
        len_x_embedding_8_read,
        len_x_embedding_8_num_data_valid,
        len_x_embedding_8_fifo_cap,
        ipd_x_embedding_0_dout,
        ipd_x_embedding_0_empty_n,
        ipd_x_embedding_0_read,
        ipd_x_embedding_0_num_data_valid,
        ipd_x_embedding_0_fifo_cap,
        ipd_x_embedding_1_dout,
        ipd_x_embedding_1_empty_n,
        ipd_x_embedding_1_read,
        ipd_x_embedding_1_num_data_valid,
        ipd_x_embedding_1_fifo_cap,
        ipd_x_embedding_2_dout,
        ipd_x_embedding_2_empty_n,
        ipd_x_embedding_2_read,
        ipd_x_embedding_2_num_data_valid,
        ipd_x_embedding_2_fifo_cap,
        ipd_x_embedding_3_dout,
        ipd_x_embedding_3_empty_n,
        ipd_x_embedding_3_read,
        ipd_x_embedding_3_num_data_valid,
        ipd_x_embedding_3_fifo_cap,
        ipd_x_embedding_4_dout,
        ipd_x_embedding_4_empty_n,
        ipd_x_embedding_4_read,
        ipd_x_embedding_4_num_data_valid,
        ipd_x_embedding_4_fifo_cap,
        ipd_x_embedding_5_dout,
        ipd_x_embedding_5_empty_n,
        ipd_x_embedding_5_read,
        ipd_x_embedding_5_num_data_valid,
        ipd_x_embedding_5_fifo_cap,
        ipd_x_embedding_6_dout,
        ipd_x_embedding_6_empty_n,
        ipd_x_embedding_6_read,
        ipd_x_embedding_6_num_data_valid,
        ipd_x_embedding_6_fifo_cap,
        ipd_x_embedding_7_dout,
        ipd_x_embedding_7_empty_n,
        ipd_x_embedding_7_read,
        ipd_x_embedding_7_num_data_valid,
        ipd_x_embedding_7_fifo_cap,
        ipd_x_embedding_8_dout,
        ipd_x_embedding_8_empty_n,
        ipd_x_embedding_8_read,
        ipd_x_embedding_8_num_data_valid,
        ipd_x_embedding_8_fifo_cap,
        feature_embedding_0_din,
        feature_embedding_0_full_n,
        feature_embedding_0_write,
        feature_embedding_0_num_data_valid,
        feature_embedding_0_fifo_cap,
        feature_embedding_1_din,
        feature_embedding_1_full_n,
        feature_embedding_1_write,
        feature_embedding_1_num_data_valid,
        feature_embedding_1_fifo_cap,
        feature_embedding_2_din,
        feature_embedding_2_full_n,
        feature_embedding_2_write,
        feature_embedding_2_num_data_valid,
        feature_embedding_2_fifo_cap,
        feature_embedding_3_din,
        feature_embedding_3_full_n,
        feature_embedding_3_write,
        feature_embedding_3_num_data_valid,
        feature_embedding_3_fifo_cap,
        feature_embedding_4_din,
        feature_embedding_4_full_n,
        feature_embedding_4_write,
        feature_embedding_4_num_data_valid,
        feature_embedding_4_fifo_cap,
        feature_embedding_5_din,
        feature_embedding_5_full_n,
        feature_embedding_5_write,
        feature_embedding_5_num_data_valid,
        feature_embedding_5_fifo_cap,
        feature_embedding_6_din,
        feature_embedding_6_full_n,
        feature_embedding_6_write,
        feature_embedding_6_num_data_valid,
        feature_embedding_6_fifo_cap,
        feature_embedding_7_din,
        feature_embedding_7_full_n,
        feature_embedding_7_write,
        feature_embedding_7_num_data_valid,
        feature_embedding_7_fifo_cap,
        feature_embedding_8_din,
        feature_embedding_8_full_n,
        feature_embedding_8_write,
        feature_embedding_8_num_data_valid,
        feature_embedding_8_fifo_cap
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [319:0] len_x_embedding_0_dout;
input   len_x_embedding_0_empty_n;
output   len_x_embedding_0_read;
input  [2:0] len_x_embedding_0_num_data_valid;
input  [2:0] len_x_embedding_0_fifo_cap;
input  [319:0] len_x_embedding_1_dout;
input   len_x_embedding_1_empty_n;
output   len_x_embedding_1_read;
input  [2:0] len_x_embedding_1_num_data_valid;
input  [2:0] len_x_embedding_1_fifo_cap;
input  [319:0] len_x_embedding_2_dout;
input   len_x_embedding_2_empty_n;
output   len_x_embedding_2_read;
input  [2:0] len_x_embedding_2_num_data_valid;
input  [2:0] len_x_embedding_2_fifo_cap;
input  [319:0] len_x_embedding_3_dout;
input   len_x_embedding_3_empty_n;
output   len_x_embedding_3_read;
input  [2:0] len_x_embedding_3_num_data_valid;
input  [2:0] len_x_embedding_3_fifo_cap;
input  [319:0] len_x_embedding_4_dout;
input   len_x_embedding_4_empty_n;
output   len_x_embedding_4_read;
input  [2:0] len_x_embedding_4_num_data_valid;
input  [2:0] len_x_embedding_4_fifo_cap;
input  [319:0] len_x_embedding_5_dout;
input   len_x_embedding_5_empty_n;
output   len_x_embedding_5_read;
input  [2:0] len_x_embedding_5_num_data_valid;
input  [2:0] len_x_embedding_5_fifo_cap;
input  [319:0] len_x_embedding_6_dout;
input   len_x_embedding_6_empty_n;
output   len_x_embedding_6_read;
input  [2:0] len_x_embedding_6_num_data_valid;
input  [2:0] len_x_embedding_6_fifo_cap;
input  [319:0] len_x_embedding_7_dout;
input   len_x_embedding_7_empty_n;
output   len_x_embedding_7_read;
input  [2:0] len_x_embedding_7_num_data_valid;
input  [2:0] len_x_embedding_7_fifo_cap;
input  [319:0] len_x_embedding_8_dout;
input   len_x_embedding_8_empty_n;
output   len_x_embedding_8_read;
input  [2:0] len_x_embedding_8_num_data_valid;
input  [2:0] len_x_embedding_8_fifo_cap;
input  [255:0] ipd_x_embedding_0_dout;
input   ipd_x_embedding_0_empty_n;
output   ipd_x_embedding_0_read;
input  [2:0] ipd_x_embedding_0_num_data_valid;
input  [2:0] ipd_x_embedding_0_fifo_cap;
input  [255:0] ipd_x_embedding_1_dout;
input   ipd_x_embedding_1_empty_n;
output   ipd_x_embedding_1_read;
input  [2:0] ipd_x_embedding_1_num_data_valid;
input  [2:0] ipd_x_embedding_1_fifo_cap;
input  [255:0] ipd_x_embedding_2_dout;
input   ipd_x_embedding_2_empty_n;
output   ipd_x_embedding_2_read;
input  [2:0] ipd_x_embedding_2_num_data_valid;
input  [2:0] ipd_x_embedding_2_fifo_cap;
input  [255:0] ipd_x_embedding_3_dout;
input   ipd_x_embedding_3_empty_n;
output   ipd_x_embedding_3_read;
input  [2:0] ipd_x_embedding_3_num_data_valid;
input  [2:0] ipd_x_embedding_3_fifo_cap;
input  [255:0] ipd_x_embedding_4_dout;
input   ipd_x_embedding_4_empty_n;
output   ipd_x_embedding_4_read;
input  [2:0] ipd_x_embedding_4_num_data_valid;
input  [2:0] ipd_x_embedding_4_fifo_cap;
input  [255:0] ipd_x_embedding_5_dout;
input   ipd_x_embedding_5_empty_n;
output   ipd_x_embedding_5_read;
input  [2:0] ipd_x_embedding_5_num_data_valid;
input  [2:0] ipd_x_embedding_5_fifo_cap;
input  [255:0] ipd_x_embedding_6_dout;
input   ipd_x_embedding_6_empty_n;
output   ipd_x_embedding_6_read;
input  [2:0] ipd_x_embedding_6_num_data_valid;
input  [2:0] ipd_x_embedding_6_fifo_cap;
input  [255:0] ipd_x_embedding_7_dout;
input   ipd_x_embedding_7_empty_n;
output   ipd_x_embedding_7_read;
input  [2:0] ipd_x_embedding_7_num_data_valid;
input  [2:0] ipd_x_embedding_7_fifo_cap;
input  [255:0] ipd_x_embedding_8_dout;
input   ipd_x_embedding_8_empty_n;
output   ipd_x_embedding_8_read;
input  [2:0] ipd_x_embedding_8_num_data_valid;
input  [2:0] ipd_x_embedding_8_fifo_cap;
output  [575:0] feature_embedding_0_din;
input   feature_embedding_0_full_n;
output   feature_embedding_0_write;
input  [2:0] feature_embedding_0_num_data_valid;
input  [2:0] feature_embedding_0_fifo_cap;
output  [575:0] feature_embedding_1_din;
input   feature_embedding_1_full_n;
output   feature_embedding_1_write;
input  [2:0] feature_embedding_1_num_data_valid;
input  [2:0] feature_embedding_1_fifo_cap;
output  [575:0] feature_embedding_2_din;
input   feature_embedding_2_full_n;
output   feature_embedding_2_write;
input  [2:0] feature_embedding_2_num_data_valid;
input  [2:0] feature_embedding_2_fifo_cap;
output  [575:0] feature_embedding_3_din;
input   feature_embedding_3_full_n;
output   feature_embedding_3_write;
input  [2:0] feature_embedding_3_num_data_valid;
input  [2:0] feature_embedding_3_fifo_cap;
output  [575:0] feature_embedding_4_din;
input   feature_embedding_4_full_n;
output   feature_embedding_4_write;
input  [2:0] feature_embedding_4_num_data_valid;
input  [2:0] feature_embedding_4_fifo_cap;
output  [575:0] feature_embedding_5_din;
input   feature_embedding_5_full_n;
output   feature_embedding_5_write;
input  [2:0] feature_embedding_5_num_data_valid;
input  [2:0] feature_embedding_5_fifo_cap;
output  [575:0] feature_embedding_6_din;
input   feature_embedding_6_full_n;
output   feature_embedding_6_write;
input  [2:0] feature_embedding_6_num_data_valid;
input  [2:0] feature_embedding_6_fifo_cap;
output  [575:0] feature_embedding_7_din;
input   feature_embedding_7_full_n;
output   feature_embedding_7_write;
input  [2:0] feature_embedding_7_num_data_valid;
input  [2:0] feature_embedding_7_fifo_cap;
output  [575:0] feature_embedding_8_din;
input   feature_embedding_8_full_n;
output   feature_embedding_8_write;
input  [2:0] feature_embedding_8_num_data_valid;
input  [2:0] feature_embedding_8_fifo_cap;

reg ap_done;
reg ap_idle;
reg start_write;
reg len_x_embedding_0_read;
reg len_x_embedding_1_read;
reg len_x_embedding_2_read;
reg len_x_embedding_3_read;
reg len_x_embedding_4_read;
reg len_x_embedding_5_read;
reg len_x_embedding_6_read;
reg len_x_embedding_7_read;
reg len_x_embedding_8_read;
reg ipd_x_embedding_0_read;
reg ipd_x_embedding_1_read;
reg ipd_x_embedding_2_read;
reg ipd_x_embedding_3_read;
reg ipd_x_embedding_4_read;
reg ipd_x_embedding_5_read;
reg ipd_x_embedding_6_read;
reg ipd_x_embedding_7_read;
reg ipd_x_embedding_8_read;
reg feature_embedding_0_write;
reg feature_embedding_1_write;
reg feature_embedding_2_write;
reg feature_embedding_3_write;
reg feature_embedding_4_write;
reg feature_embedding_5_write;
reg feature_embedding_6_write;
reg feature_embedding_7_write;
reg feature_embedding_8_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    len_x_embedding_0_blk_n;
reg    len_x_embedding_1_blk_n;
reg    len_x_embedding_2_blk_n;
reg    len_x_embedding_3_blk_n;
reg    len_x_embedding_4_blk_n;
reg    len_x_embedding_5_blk_n;
reg    len_x_embedding_6_blk_n;
reg    len_x_embedding_7_blk_n;
reg    len_x_embedding_8_blk_n;
reg    ipd_x_embedding_0_blk_n;
reg    ipd_x_embedding_1_blk_n;
reg    ipd_x_embedding_2_blk_n;
reg    ipd_x_embedding_3_blk_n;
reg    ipd_x_embedding_4_blk_n;
reg    ipd_x_embedding_5_blk_n;
reg    ipd_x_embedding_6_blk_n;
reg    ipd_x_embedding_7_blk_n;
reg    ipd_x_embedding_8_blk_n;
reg    feature_embedding_0_blk_n;
reg    feature_embedding_1_blk_n;
reg    feature_embedding_2_blk_n;
reg    feature_embedding_3_blk_n;
reg    feature_embedding_4_blk_n;
reg    feature_embedding_5_blk_n;
reg    feature_embedding_6_blk_n;
reg    feature_embedding_7_blk_n;
reg    feature_embedding_8_blk_n;
reg    ap_block_state1;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        feature_embedding_0_blk_n = feature_embedding_0_full_n;
    end else begin
        feature_embedding_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        feature_embedding_0_write = 1'b1;
    end else begin
        feature_embedding_0_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        feature_embedding_1_blk_n = feature_embedding_1_full_n;
    end else begin
        feature_embedding_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        feature_embedding_1_write = 1'b1;
    end else begin
        feature_embedding_1_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        feature_embedding_2_blk_n = feature_embedding_2_full_n;
    end else begin
        feature_embedding_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        feature_embedding_2_write = 1'b1;
    end else begin
        feature_embedding_2_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        feature_embedding_3_blk_n = feature_embedding_3_full_n;
    end else begin
        feature_embedding_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        feature_embedding_3_write = 1'b1;
    end else begin
        feature_embedding_3_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        feature_embedding_4_blk_n = feature_embedding_4_full_n;
    end else begin
        feature_embedding_4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        feature_embedding_4_write = 1'b1;
    end else begin
        feature_embedding_4_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        feature_embedding_5_blk_n = feature_embedding_5_full_n;
    end else begin
        feature_embedding_5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        feature_embedding_5_write = 1'b1;
    end else begin
        feature_embedding_5_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        feature_embedding_6_blk_n = feature_embedding_6_full_n;
    end else begin
        feature_embedding_6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        feature_embedding_6_write = 1'b1;
    end else begin
        feature_embedding_6_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        feature_embedding_7_blk_n = feature_embedding_7_full_n;
    end else begin
        feature_embedding_7_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        feature_embedding_7_write = 1'b1;
    end else begin
        feature_embedding_7_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        feature_embedding_8_blk_n = feature_embedding_8_full_n;
    end else begin
        feature_embedding_8_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        feature_embedding_8_write = 1'b1;
    end else begin
        feature_embedding_8_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ipd_x_embedding_0_blk_n = ipd_x_embedding_0_empty_n;
    end else begin
        ipd_x_embedding_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ipd_x_embedding_0_read = 1'b1;
    end else begin
        ipd_x_embedding_0_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ipd_x_embedding_1_blk_n = ipd_x_embedding_1_empty_n;
    end else begin
        ipd_x_embedding_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ipd_x_embedding_1_read = 1'b1;
    end else begin
        ipd_x_embedding_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ipd_x_embedding_2_blk_n = ipd_x_embedding_2_empty_n;
    end else begin
        ipd_x_embedding_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ipd_x_embedding_2_read = 1'b1;
    end else begin
        ipd_x_embedding_2_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ipd_x_embedding_3_blk_n = ipd_x_embedding_3_empty_n;
    end else begin
        ipd_x_embedding_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ipd_x_embedding_3_read = 1'b1;
    end else begin
        ipd_x_embedding_3_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ipd_x_embedding_4_blk_n = ipd_x_embedding_4_empty_n;
    end else begin
        ipd_x_embedding_4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ipd_x_embedding_4_read = 1'b1;
    end else begin
        ipd_x_embedding_4_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ipd_x_embedding_5_blk_n = ipd_x_embedding_5_empty_n;
    end else begin
        ipd_x_embedding_5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ipd_x_embedding_5_read = 1'b1;
    end else begin
        ipd_x_embedding_5_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ipd_x_embedding_6_blk_n = ipd_x_embedding_6_empty_n;
    end else begin
        ipd_x_embedding_6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ipd_x_embedding_6_read = 1'b1;
    end else begin
        ipd_x_embedding_6_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ipd_x_embedding_7_blk_n = ipd_x_embedding_7_empty_n;
    end else begin
        ipd_x_embedding_7_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ipd_x_embedding_7_read = 1'b1;
    end else begin
        ipd_x_embedding_7_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ipd_x_embedding_8_blk_n = ipd_x_embedding_8_empty_n;
    end else begin
        ipd_x_embedding_8_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ipd_x_embedding_8_read = 1'b1;
    end else begin
        ipd_x_embedding_8_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        len_x_embedding_0_blk_n = len_x_embedding_0_empty_n;
    end else begin
        len_x_embedding_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        len_x_embedding_0_read = 1'b1;
    end else begin
        len_x_embedding_0_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        len_x_embedding_1_blk_n = len_x_embedding_1_empty_n;
    end else begin
        len_x_embedding_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        len_x_embedding_1_read = 1'b1;
    end else begin
        len_x_embedding_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        len_x_embedding_2_blk_n = len_x_embedding_2_empty_n;
    end else begin
        len_x_embedding_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        len_x_embedding_2_read = 1'b1;
    end else begin
        len_x_embedding_2_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        len_x_embedding_3_blk_n = len_x_embedding_3_empty_n;
    end else begin
        len_x_embedding_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        len_x_embedding_3_read = 1'b1;
    end else begin
        len_x_embedding_3_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        len_x_embedding_4_blk_n = len_x_embedding_4_empty_n;
    end else begin
        len_x_embedding_4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        len_x_embedding_4_read = 1'b1;
    end else begin
        len_x_embedding_4_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        len_x_embedding_5_blk_n = len_x_embedding_5_empty_n;
    end else begin
        len_x_embedding_5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        len_x_embedding_5_read = 1'b1;
    end else begin
        len_x_embedding_5_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        len_x_embedding_6_blk_n = len_x_embedding_6_empty_n;
    end else begin
        len_x_embedding_6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        len_x_embedding_6_read = 1'b1;
    end else begin
        len_x_embedding_6_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        len_x_embedding_7_blk_n = len_x_embedding_7_empty_n;
    end else begin
        len_x_embedding_7_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        len_x_embedding_7_read = 1'b1;
    end else begin
        len_x_embedding_7_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        len_x_embedding_8_blk_n = len_x_embedding_8_empty_n;
    end else begin
        len_x_embedding_8_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        len_x_embedding_8_read = 1'b1;
    end else begin
        len_x_embedding_8_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ipd_x_embedding_1_empty_n == 1'b0) | (ipd_x_embedding_0_empty_n == 1'b0) | (len_x_embedding_8_empty_n == 1'b0) | (len_x_embedding_7_empty_n == 1'b0) | (real_start == 1'b0) | (len_x_embedding_6_empty_n == 1'b0) | (len_x_embedding_5_empty_n == 1'b0) | (len_x_embedding_4_empty_n == 1'b0) | (len_x_embedding_3_empty_n == 1'b0) | (len_x_embedding_2_empty_n == 1'b0) | (len_x_embedding_1_empty_n == 1'b0) | (len_x_embedding_0_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (feature_embedding_8_full_n == 1'b0) | (feature_embedding_7_full_n == 1'b0) | (feature_embedding_6_full_n == 1'b0) | (feature_embedding_5_full_n == 1'b0) | (feature_embedding_4_full_n == 1'b0) | (feature_embedding_3_full_n == 1'b0) | (feature_embedding_2_full_n == 1'b0) | (feature_embedding_1_full_n == 1'b0) | (feature_embedding_0_full_n == 1'b0) | (ipd_x_embedding_8_empty_n == 1'b0) | (ipd_x_embedding_7_empty_n == 1'b0) | (ipd_x_embedding_6_empty_n == 1'b0) | (ipd_x_embedding_5_empty_n == 1'b0) | (ipd_x_embedding_4_empty_n == 1'b0) | (ipd_x_embedding_3_empty_n 
    == 1'b0) | (ipd_x_embedding_2_empty_n == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign feature_embedding_0_din = {{ipd_x_embedding_0_dout}, {len_x_embedding_0_dout}};

assign feature_embedding_1_din = {{ipd_x_embedding_1_dout}, {len_x_embedding_1_dout}};

assign feature_embedding_2_din = {{ipd_x_embedding_2_dout}, {len_x_embedding_2_dout}};

assign feature_embedding_3_din = {{ipd_x_embedding_3_dout}, {len_x_embedding_3_dout}};

assign feature_embedding_4_din = {{ipd_x_embedding_4_dout}, {len_x_embedding_4_dout}};

assign feature_embedding_5_din = {{ipd_x_embedding_5_dout}, {len_x_embedding_5_dout}};

assign feature_embedding_6_din = {{ipd_x_embedding_6_dout}, {len_x_embedding_6_dout}};

assign feature_embedding_7_din = {{ipd_x_embedding_7_dout}, {len_x_embedding_7_dout}};

assign feature_embedding_8_din = {{ipd_x_embedding_8_dout}, {len_x_embedding_8_dout}};

assign start_out = real_start;

endmodule //CNN_stream_feature_concate_layer_stream_9u_s

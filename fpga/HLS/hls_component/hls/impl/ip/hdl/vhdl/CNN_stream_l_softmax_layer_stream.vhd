-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CNN_stream_l_softmax_layer_stream is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    fc2_embedding_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    fc2_embedding_0_empty_n : IN STD_LOGIC;
    fc2_embedding_0_read : OUT STD_LOGIC;
    fc2_embedding_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    fc2_embedding_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    fc2_embedding_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    fc2_embedding_1_empty_n : IN STD_LOGIC;
    fc2_embedding_1_read : OUT STD_LOGIC;
    fc2_embedding_1_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    fc2_embedding_1_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    dout_0_TREADY : IN STD_LOGIC;
    dout_1_TREADY : IN STD_LOGIC;
    dout_0_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    dout_0_TVALID : OUT STD_LOGIC;
    dout_1_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    dout_1_TVALID : OUT STD_LOGIC );
end;


architecture behav of CNN_stream_l_softmax_layer_stream is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv9_96 : STD_LOGIC_VECTOR (8 downto 0) := "010010110";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_19 : STD_LOGIC_VECTOR (8 downto 0) := "000011001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_subdone_grp3_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage2_subdone_grp3 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone_grp4_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage2_subdone_grp4 : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal fc2_embedding_0_blk_n : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone_grp1_done_reg_iter0 : BOOLEAN := false;
    signal ap_block_pp0_stage0_subdone_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal fc2_embedding_1_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_grp2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone_grp2_done_reg_iter0 : BOOLEAN := false;
    signal ap_block_pp0_stage0_subdone_grp2 : BOOLEAN;
    signal dout_0_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage2_grp3 : BOOLEAN;
    signal ap_block_pp0_stage0_grp5 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone_grp5_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage0_subdone_grp5 : BOOLEAN;
    signal dout_1_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage2_grp4 : BOOLEAN;
    signal ap_block_pp0_stage0_grp6 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone_grp6_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage0_subdone_grp6 : BOOLEAN;
    signal grp_fu_115_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_132 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2_11001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone_grp0_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage2_subdone_grp0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone_grp0_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage0_subdone_grp0 : BOOLEAN;
    signal fc2_embedding_0_read_reg_559 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1_pp0_stage0_iter0_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_grp1 : BOOLEAN;
    signal fc2_embedding_1_read_reg_564 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1_pp0_stage0_iter0_grp2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_grp2 : BOOLEAN;
    signal grp_fu_119_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal vf_reg_569 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal vf_reg_569_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal vf_reg_569_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal vf_reg_569_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal vf_reg_569_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal vf_reg_569_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal vf_reg_569_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal vf_reg_569_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal vf_reg_569_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal vf_reg_569_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal vf_reg_569_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal vf_reg_569_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal vf_reg_569_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal vf_reg_569_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal vf_reg_569_pp0_iter16_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal vf_reg_569_pp0_iter17_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal vf_reg_569_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal vf_reg_569_pp0_iter19_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal vf_reg_569_pp0_iter20_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal vf_reg_569_pp0_iter21_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal vf_reg_569_pp0_iter22_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal vf_1_reg_575 : STD_LOGIC_VECTOR (31 downto 0);
    signal vf_1_reg_575_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal vf_1_reg_575_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal vf_1_reg_575_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal vf_1_reg_575_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal vf_1_reg_575_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal vf_1_reg_575_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal vf_1_reg_575_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal vf_1_reg_575_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal vf_1_reg_575_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal vf_1_reg_575_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal vf_1_reg_575_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal vf_1_reg_575_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal vf_1_reg_575_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal vf_1_reg_575_pp0_iter16_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal vf_1_reg_575_pp0_iter17_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal vf_1_reg_575_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal vf_1_reg_575_pp0_iter19_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal vf_1_reg_575_pp0_iter20_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal vf_1_reg_575_pp0_iter21_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal vf_1_reg_575_pp0_iter22_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_127_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_581 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_586 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_586_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_586_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_586_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_110_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal fsum_reg_591 : STD_LOGIC_VECTOR (31 downto 0);
    signal fsum_1_reg_596 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_122_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal fsum_2_reg_601 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_606 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln299_2_fu_168_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln299_2_reg_611 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln299_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln299_reg_616 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln299_1_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln299_1_reg_623 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln299_2_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln299_2_reg_629 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln299_fu_232_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln299_reg_634 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln299_4_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln299_4_reg_639 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln299_fu_266_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln299_reg_644 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln299_2_fu_340_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln299_2_reg_649 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_reg_654 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln299_8_fu_379_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln299_8_reg_659 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln299_5_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln299_5_reg_664 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln299_6_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln299_6_reg_671 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln299_7_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln299_7_reg_677 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln299_3_fu_443_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln299_3_reg_682 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln299_9_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln299_9_reg_687 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln299_1_fu_477_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln299_1_reg_692 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage2_11001_grp4 : BOOLEAN;
    signal regslice_both_dout_0_U_apdone_blk : STD_LOGIC;
    signal regslice_both_dout_1_U_apdone_blk : STD_LOGIC;
    signal ap_block_pp0_stage2_01001_grp3 : BOOLEAN;
    signal ap_block_pp0_stage2_11001_grp3 : BOOLEAN;
    signal ap_block_pp0_stage2_01001_grp4 : BOOLEAN;
    signal grp_fu_110_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_110_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2_grp0 : BOOLEAN;
    signal ap_block_pp0_stage0_grp0 : BOOLEAN;
    signal grp_fu_115_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_119_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal grp_fu_127_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln725_fu_136_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_152_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln299_1_fu_164_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln299_fu_140_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln299_fu_160_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln299_fu_186_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln299_1_cast_fu_172_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln299_1_fu_218_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln299_fu_192_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln299_fu_222_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln299_3_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln299_4_fu_228_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln299_3_fu_196_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln299_1_fu_240_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_246_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln299_1cast_fu_262_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln299_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln299_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln299_1_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln299_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln299_1_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_312_p8 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_312_p9 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_312_p10 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_fu_312_p11 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln299_2_fu_334_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitcast_ln725_1_fu_347_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_363_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln299_7_fu_375_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln299_6_fu_351_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln299_3_fu_371_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln299_3_fu_397_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln299_6_cast_fu_383_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln299_6_fu_429_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln299_1_fu_403_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln299_1_fu_433_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln299_8_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln299_10_fu_439_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln299_9_fu_407_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln299_4_fu_451_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_fu_457_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln299_4cast_fu_473_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln299_2_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln299_1_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln299_3_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln299_2_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln299_3_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_523_p8 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_523_p9 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_523_p10 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_fu_523_p11 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln299_5_fu_545_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_110_ce : STD_LOGIC;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal grp_fu_115_ce : STD_LOGIC;
    signal grp_fu_119_ce : STD_LOGIC;
    signal grp_fu_122_ce : STD_LOGIC;
    signal grp_fu_127_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0_0to26 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0_1to27 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone_grp5_done_reg_iter0 : BOOLEAN := false;
    signal ap_block_pp0_stage0_subdone_grp6_done_reg_iter0 : BOOLEAN := false;
    signal dout_0_TVALID_int_regslice : STD_LOGIC;
    signal dout_0_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_dout_0_U_vld_out : STD_LOGIC;
    signal dout_1_TDATA_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal dout_1_TVALID_int_regslice : STD_LOGIC;
    signal dout_1_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_dout_1_U_vld_out : STD_LOGIC;
    signal tmp_7_fu_312_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_fu_312_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_fu_312_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_fu_312_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_fu_523_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_fu_523_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_fu_523_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_fu_523_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component CNN_stream_fadd_32ns_32ns_32_10_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CNN_stream_fsub_32ns_32ns_32_10_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CNN_stream_sitofp_32ns_32_7_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CNN_stream_flog_32ns_32ns_32_19_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CNN_stream_fexp_32ns_32ns_32_21_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component CNN_stream_sparsemux_9_3_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (2 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (2 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (2 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (2 downto 0);
        din3_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        def : IN STD_LOGIC_VECTOR (7 downto 0);
        sel : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component CNN_stream_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    fadd_32ns_32ns_32_10_full_dsp_1_U763 : component CNN_stream_fadd_32ns_32ns_32_10_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_110_p0,
        din1 => grp_fu_110_p1,
        ce => grp_fu_110_ce,
        dout => grp_fu_110_p2);

    fsub_32ns_32ns_32_10_full_dsp_1_U764 : component CNN_stream_fsub_32ns_32ns_32_10_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_115_p0,
        din1 => fsum_2_reg_601,
        ce => grp_fu_115_ce,
        dout => grp_fu_115_p2);

    sitofp_32ns_32_7_no_dsp_1_U765 : component CNN_stream_sitofp_32ns_32_7_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_119_p0,
        ce => grp_fu_119_ce,
        dout => grp_fu_119_p1);

    flog_32ns_32ns_32_19_full_dsp_1_U766 : component CNN_stream_flog_32ns_32ns_32_19_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 19,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => fsum_1_reg_596,
        ce => grp_fu_122_ce,
        dout => grp_fu_122_p2);

    fexp_32ns_32ns_32_21_full_dsp_1_U767 : component CNN_stream_fexp_32ns_32ns_32_21_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 21,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => grp_fu_127_p1,
        ce => grp_fu_127_ce,
        dout => grp_fu_127_p2);

    sparsemux_9_3_8_1_1_U768 : component CNN_stream_sparsemux_9_3_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "100",
        din0_WIDTH => 8,
        CASE1 => "010",
        din1_WIDTH => 8,
        CASE2 => "001",
        din2_WIDTH => 8,
        CASE3 => "000",
        din3_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => trunc_ln299_2_reg_611,
        din2 => select_ln299_reg_634,
        din3 => tmp_7_fu_312_p8,
        def => tmp_7_fu_312_p9,
        sel => tmp_7_fu_312_p10,
        dout => tmp_7_fu_312_p11);

    sparsemux_9_3_8_1_1_U769 : component CNN_stream_sparsemux_9_3_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "100",
        din0_WIDTH => 8,
        CASE1 => "010",
        din1_WIDTH => 8,
        CASE2 => "001",
        din2_WIDTH => 8,
        CASE3 => "000",
        din3_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 3,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => trunc_ln299_8_reg_659,
        din2 => select_ln299_3_reg_682,
        din3 => tmp_8_fu_523_p8,
        def => tmp_8_fu_523_p9,
        sel => tmp_8_fu_523_p10,
        dout => tmp_8_fu_523_p11);

    regslice_both_dout_0_U : component CNN_stream_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => select_ln299_2_reg_649,
        vld_in => dout_0_TVALID_int_regslice,
        ack_in => dout_0_TREADY_int_regslice,
        data_out => dout_0_TDATA,
        vld_out => regslice_both_dout_0_U_vld_out,
        ack_out => dout_0_TREADY,
        apdone_blk => regslice_both_dout_0_U_apdone_blk);

    regslice_both_dout_1_U : component CNN_stream_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => dout_1_TDATA_int_regslice,
        vld_in => dout_1_TVALID_int_regslice,
        ack_in => dout_1_TREADY_int_regslice,
        data_out => dout_1_TDATA,
        vld_out => regslice_both_dout_1_U_vld_out,
        ack_out => dout_1_TREADY,
        apdone_blk => regslice_both_dout_1_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_block_pp0_stage0_subdone_grp0_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage0_subdone_grp0_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                        ap_block_pp0_stage0_subdone_grp0_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0)) then 
                        ap_block_pp0_stage0_subdone_grp0_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_block_pp0_stage0_subdone_grp1_done_reg_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage0_subdone_grp1_done_reg_iter0 <= ap_const_boolean_0;
            else
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                        ap_block_pp0_stage0_subdone_grp1_done_reg_iter0 <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp1)) then 
                        ap_block_pp0_stage0_subdone_grp1_done_reg_iter0 <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_block_pp0_stage0_subdone_grp2_done_reg_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage0_subdone_grp2_done_reg_iter0 <= ap_const_boolean_0;
            else
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                        ap_block_pp0_stage0_subdone_grp2_done_reg_iter0 <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp2)) then 
                        ap_block_pp0_stage0_subdone_grp2_done_reg_iter0 <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_block_pp0_stage0_subdone_grp5_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage0_subdone_grp5_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                        ap_block_pp0_stage0_subdone_grp5_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp5)) then 
                        ap_block_pp0_stage0_subdone_grp5_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_block_pp0_stage0_subdone_grp5_done_reg_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage0_subdone_grp5_done_reg_iter0 <= ap_const_boolean_0;
            else
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                        ap_block_pp0_stage0_subdone_grp5_done_reg_iter0 <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp5)) then 
                        ap_block_pp0_stage0_subdone_grp5_done_reg_iter0 <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_block_pp0_stage0_subdone_grp6_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage0_subdone_grp6_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                        ap_block_pp0_stage0_subdone_grp6_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp6)) then 
                        ap_block_pp0_stage0_subdone_grp6_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_block_pp0_stage0_subdone_grp6_done_reg_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage0_subdone_grp6_done_reg_iter0 <= ap_const_boolean_0;
            else
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                        ap_block_pp0_stage0_subdone_grp6_done_reg_iter0 <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp6)) then 
                        ap_block_pp0_stage0_subdone_grp6_done_reg_iter0 <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_block_pp0_stage2_subdone_grp0_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage2_subdone_grp0_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then 
                        ap_block_pp0_stage2_subdone_grp0_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone_grp0)) then 
                        ap_block_pp0_stage2_subdone_grp0_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_block_pp0_stage2_subdone_grp3_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage2_subdone_grp3_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then 
                        ap_block_pp0_stage2_subdone_grp3_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone_grp3)) then 
                        ap_block_pp0_stage2_subdone_grp3_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_block_pp0_stage2_subdone_grp4_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage2_subdone_grp4_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then 
                        ap_block_pp0_stage2_subdone_grp4_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone_grp4)) then 
                        ap_block_pp0_stage2_subdone_grp4_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp1_done_reg_iter0))) then
                fc2_embedding_0_read_reg_559 <= fc2_embedding_0_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp2_done_reg_iter0))) then
                fc2_embedding_1_read_reg_564 <= fc2_embedding_1_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0))) then
                fsum_1_reg_596 <= grp_fu_110_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                fsum_2_reg_601 <= grp_fu_122_p2;
                icmp_ln299_5_reg_664 <= icmp_ln299_5_fu_391_p2;
                icmp_ln299_6_reg_671 <= icmp_ln299_6_fu_411_p2;
                icmp_ln299_7_reg_677 <= icmp_ln299_7_fu_417_p2;
                icmp_ln299_9_reg_687 <= icmp_ln299_9_fu_467_p2;
                select_ln299_2_reg_649 <= select_ln299_2_fu_340_p3;
                select_ln299_3_reg_682 <= select_ln299_3_fu_443_p3;
                shl_ln299_1_reg_692 <= shl_ln299_1_fu_477_p2;
                tmp_4_reg_654 <= bitcast_ln725_1_fu_347_p1(31 downto 31);
                trunc_ln299_8_reg_659 <= trunc_ln299_8_fu_379_p1;
                vf_reg_569_pp0_iter10_reg <= vf_reg_569_pp0_iter9_reg;
                vf_reg_569_pp0_iter11_reg <= vf_reg_569_pp0_iter10_reg;
                vf_reg_569_pp0_iter12_reg <= vf_reg_569_pp0_iter11_reg;
                vf_reg_569_pp0_iter13_reg <= vf_reg_569_pp0_iter12_reg;
                vf_reg_569_pp0_iter14_reg <= vf_reg_569_pp0_iter13_reg;
                vf_reg_569_pp0_iter15_reg <= vf_reg_569_pp0_iter14_reg;
                vf_reg_569_pp0_iter16_reg <= vf_reg_569_pp0_iter15_reg;
                vf_reg_569_pp0_iter17_reg <= vf_reg_569_pp0_iter16_reg;
                vf_reg_569_pp0_iter18_reg <= vf_reg_569_pp0_iter17_reg;
                vf_reg_569_pp0_iter19_reg <= vf_reg_569_pp0_iter18_reg;
                vf_reg_569_pp0_iter20_reg <= vf_reg_569_pp0_iter19_reg;
                vf_reg_569_pp0_iter21_reg <= vf_reg_569_pp0_iter20_reg;
                vf_reg_569_pp0_iter22_reg <= vf_reg_569_pp0_iter21_reg;
                vf_reg_569_pp0_iter3_reg <= vf_reg_569;
                vf_reg_569_pp0_iter4_reg <= vf_reg_569_pp0_iter3_reg;
                vf_reg_569_pp0_iter5_reg <= vf_reg_569_pp0_iter4_reg;
                vf_reg_569_pp0_iter6_reg <= vf_reg_569_pp0_iter5_reg;
                vf_reg_569_pp0_iter7_reg <= vf_reg_569_pp0_iter6_reg;
                vf_reg_569_pp0_iter8_reg <= vf_reg_569_pp0_iter7_reg;
                vf_reg_569_pp0_iter9_reg <= vf_reg_569_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001_grp0))) then
                fsum_reg_591 <= grp_fu_110_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0))) then
                icmp_ln299_1_reg_623 <= icmp_ln299_1_fu_200_p2;
                icmp_ln299_2_reg_629 <= icmp_ln299_2_fu_206_p2;
                icmp_ln299_4_reg_639 <= icmp_ln299_4_fu_256_p2;
                icmp_ln299_reg_616 <= icmp_ln299_fu_180_p2;
                select_ln299_reg_634 <= select_ln299_fu_232_p3;
                shl_ln299_reg_644 <= shl_ln299_fu_266_p2;
                tmp_1_reg_606 <= bitcast_ln725_fu_136_p1(31 downto 31);
                trunc_ln299_2_reg_611 <= trunc_ln299_2_fu_168_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1)))) then
                reg_132 <= grp_fu_115_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                tmp_reg_581 <= grp_fu_127_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001_grp0))) then
                tmp_s_reg_586 <= grp_fu_127_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001_grp0))) then
                tmp_s_reg_586_pp0_iter10_reg <= tmp_s_reg_586;
                tmp_s_reg_586_pp0_iter11_reg <= tmp_s_reg_586_pp0_iter10_reg;
                tmp_s_reg_586_pp0_iter12_reg <= tmp_s_reg_586_pp0_iter11_reg;
                vf_1_reg_575_pp0_iter10_reg <= vf_1_reg_575_pp0_iter9_reg;
                vf_1_reg_575_pp0_iter11_reg <= vf_1_reg_575_pp0_iter10_reg;
                vf_1_reg_575_pp0_iter12_reg <= vf_1_reg_575_pp0_iter11_reg;
                vf_1_reg_575_pp0_iter13_reg <= vf_1_reg_575_pp0_iter12_reg;
                vf_1_reg_575_pp0_iter14_reg <= vf_1_reg_575_pp0_iter13_reg;
                vf_1_reg_575_pp0_iter15_reg <= vf_1_reg_575_pp0_iter14_reg;
                vf_1_reg_575_pp0_iter16_reg <= vf_1_reg_575_pp0_iter15_reg;
                vf_1_reg_575_pp0_iter17_reg <= vf_1_reg_575_pp0_iter16_reg;
                vf_1_reg_575_pp0_iter18_reg <= vf_1_reg_575_pp0_iter17_reg;
                vf_1_reg_575_pp0_iter19_reg <= vf_1_reg_575_pp0_iter18_reg;
                vf_1_reg_575_pp0_iter20_reg <= vf_1_reg_575_pp0_iter19_reg;
                vf_1_reg_575_pp0_iter21_reg <= vf_1_reg_575_pp0_iter20_reg;
                vf_1_reg_575_pp0_iter22_reg <= vf_1_reg_575_pp0_iter21_reg;
                vf_1_reg_575_pp0_iter3_reg <= vf_1_reg_575;
                vf_1_reg_575_pp0_iter4_reg <= vf_1_reg_575_pp0_iter3_reg;
                vf_1_reg_575_pp0_iter5_reg <= vf_1_reg_575_pp0_iter4_reg;
                vf_1_reg_575_pp0_iter6_reg <= vf_1_reg_575_pp0_iter5_reg;
                vf_1_reg_575_pp0_iter7_reg <= vf_1_reg_575_pp0_iter6_reg;
                vf_1_reg_575_pp0_iter8_reg <= vf_1_reg_575_pp0_iter7_reg;
                vf_1_reg_575_pp0_iter9_reg <= vf_1_reg_575_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001_grp0))) then
                vf_1_reg_575 <= grp_fu_119_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                vf_reg_569 <= grp_fu_119_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage2_subdone, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0, ap_idle_pp0_1to27, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to27 = ap_const_logic_1))) and (ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    and_ln299_1_fu_298_p2 <= (xor_ln299_1_fu_292_p2 and icmp_ln299_2_reg_629);
    and_ln299_2_fu_494_p2 <= (xor_ln299_2_fu_489_p2 and icmp_ln299_6_reg_671);
    and_ln299_3_fu_509_p2 <= (xor_ln299_3_fu_503_p2 and icmp_ln299_7_reg_677);
    and_ln299_fu_283_p2 <= (xor_ln299_fu_278_p2 and icmp_ln299_1_reg_623);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter27, ap_done_reg, ap_block_pp0_stage0_subdone_grp1_done_reg_iter0, ap_block_pp0_stage0_subdone_grp2_done_reg_iter0, ap_block_pp0_stage0_subdone_grp5_done_reg, ap_block_pp0_stage0_subdone_grp6_done_reg, ap_block_state1_pp0_stage0_iter0_grp1, ap_block_state1_pp0_stage0_iter0_grp2, regslice_both_dout_0_U_apdone_blk, regslice_both_dout_1_U_apdone_blk, dout_0_TREADY_int_regslice, dout_1_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter27 = ap_const_logic_1) and ((regslice_both_dout_1_U_apdone_blk = ap_const_logic_1) or (regslice_both_dout_0_U_apdone_blk = ap_const_logic_1) or ((dout_1_TREADY_int_regslice = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp6_done_reg)) or ((dout_0_TREADY_int_regslice = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp5_done_reg)))) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0_grp2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp2_done_reg_iter0)) or ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0_grp1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp1_done_reg_iter0)))));
    end process;


    ap_block_pp0_stage0_11001_grp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_done_reg)
    begin
                ap_block_pp0_stage0_11001_grp0 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_grp1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone_grp1_done_reg_iter0, ap_block_state1_pp0_stage0_iter0_grp1)
    begin
                ap_block_pp0_stage0_11001_grp1 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0_grp1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp1_done_reg_iter0));
    end process;


    ap_block_pp0_stage0_11001_grp2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone_grp2_done_reg_iter0, ap_block_state1_pp0_stage0_iter0_grp2)
    begin
                ap_block_pp0_stage0_11001_grp2 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0_grp2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp2_done_reg_iter0));
    end process;

        ap_block_pp0_stage0_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_grp1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_grp2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_grp5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_grp6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter27, ap_done_reg, ap_block_pp0_stage0_subdone_grp1_done_reg_iter0, ap_block_pp0_stage0_subdone_grp2_done_reg_iter0, ap_block_pp0_stage0_subdone_grp5_done_reg, ap_block_pp0_stage0_subdone_grp6_done_reg, ap_block_state1_pp0_stage0_iter0_grp1, ap_block_state1_pp0_stage0_iter0_grp2, regslice_both_dout_0_U_apdone_blk, regslice_both_dout_1_U_apdone_blk, dout_0_TREADY_int_regslice, dout_1_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter27 = ap_const_logic_1) and ((regslice_both_dout_1_U_apdone_blk = ap_const_logic_1) or (regslice_both_dout_0_U_apdone_blk = ap_const_logic_1) or ((dout_1_TREADY_int_regslice = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp6_done_reg)) or ((dout_0_TREADY_int_regslice = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp5_done_reg)))) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0_grp2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp2_done_reg_iter0)) or ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0_grp1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp1_done_reg_iter0)))));
    end process;


    ap_block_pp0_stage0_subdone_grp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_done_reg)
    begin
                ap_block_pp0_stage0_subdone_grp0 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_grp1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone_grp1_done_reg_iter0, ap_block_state1_pp0_stage0_iter0_grp1)
    begin
                ap_block_pp0_stage0_subdone_grp1 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0_grp1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp1_done_reg_iter0));
    end process;


    ap_block_pp0_stage0_subdone_grp2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone_grp2_done_reg_iter0, ap_block_state1_pp0_stage0_iter0_grp2)
    begin
                ap_block_pp0_stage0_subdone_grp2 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0_grp2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp2_done_reg_iter0));
    end process;


    ap_block_pp0_stage0_subdone_grp5_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter27, ap_done_reg, ap_block_pp0_stage0_subdone_grp5_done_reg, ap_block_pp0_stage0_subdone_grp5_done_reg_iter0, dout_0_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone_grp5 <= (((dout_0_TREADY_int_regslice = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp5_done_reg) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_done_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp5_done_reg_iter0)));
    end process;


    ap_block_pp0_stage0_subdone_grp6_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter27, ap_done_reg, ap_block_pp0_stage0_subdone_grp6_done_reg, ap_block_pp0_stage0_subdone_grp6_done_reg_iter0, dout_1_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone_grp6 <= (((dout_1_TREADY_int_regslice = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp6_done_reg) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_done_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp6_done_reg_iter0)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_done_reg)
    begin
                ap_block_pp0_stage1_11001 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_done_reg)
    begin
                ap_block_pp0_stage1_subdone <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_pp0_stage2_01001_grp3_assign_proc : process(ap_enable_reg_pp0_iter26, ap_block_pp0_stage2_subdone_grp3_done_reg, dout_0_TREADY_int_regslice)
    begin
                ap_block_pp0_stage2_01001_grp3 <= ((dout_0_TREADY_int_regslice = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone_grp3_done_reg) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage2_01001_grp4_assign_proc : process(ap_enable_reg_pp0_iter26, ap_block_pp0_stage2_subdone_grp4_done_reg, dout_1_TREADY_int_regslice)
    begin
                ap_block_pp0_stage2_01001_grp4 <= ((dout_1_TREADY_int_regslice = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone_grp4_done_reg) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter26, ap_block_pp0_stage2_subdone_grp3_done_reg, ap_block_pp0_stage2_subdone_grp4_done_reg, dout_0_TREADY_int_regslice, dout_1_TREADY_int_regslice)
    begin
                ap_block_pp0_stage2_11001 <= ((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (((dout_1_TREADY_int_regslice = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone_grp4_done_reg)) or ((dout_0_TREADY_int_regslice = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone_grp3_done_reg))));
    end process;

        ap_block_pp0_stage2_11001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_grp3_assign_proc : process(ap_enable_reg_pp0_iter26, ap_block_pp0_stage2_subdone_grp3_done_reg, dout_0_TREADY_int_regslice)
    begin
                ap_block_pp0_stage2_11001_grp3 <= ((dout_0_TREADY_int_regslice = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone_grp3_done_reg) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage2_11001_grp4_assign_proc : process(ap_enable_reg_pp0_iter26, ap_block_pp0_stage2_subdone_grp4_done_reg, dout_1_TREADY_int_regslice)
    begin
                ap_block_pp0_stage2_11001_grp4 <= ((dout_1_TREADY_int_regslice = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone_grp4_done_reg) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage2_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_grp3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_grp4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter26, ap_block_pp0_stage2_subdone_grp3_done_reg, ap_block_pp0_stage2_subdone_grp4_done_reg, dout_0_TREADY_int_regslice, dout_1_TREADY_int_regslice)
    begin
                ap_block_pp0_stage2_subdone <= ((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (((dout_1_TREADY_int_regslice = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone_grp4_done_reg)) or ((dout_0_TREADY_int_regslice = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone_grp3_done_reg))));
    end process;

        ap_block_pp0_stage2_subdone_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_subdone_grp3_assign_proc : process(ap_enable_reg_pp0_iter26, ap_block_pp0_stage2_subdone_grp3_done_reg, dout_0_TREADY_int_regslice)
    begin
                ap_block_pp0_stage2_subdone_grp3 <= ((dout_0_TREADY_int_regslice = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone_grp3_done_reg) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage2_subdone_grp4_assign_proc : process(ap_enable_reg_pp0_iter26, ap_block_pp0_stage2_subdone_grp4_done_reg, dout_1_TREADY_int_regslice)
    begin
                ap_block_pp0_stage2_subdone_grp4 <= ((dout_1_TREADY_int_regslice = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone_grp4_done_reg) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1));
    end process;


    ap_block_state1_pp0_stage0_iter0_grp1_assign_proc : process(fc2_embedding_0_empty_n, ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0_grp1 <= ((ap_done_reg = ap_const_logic_1) or (fc2_embedding_0_empty_n = ap_const_logic_0));
    end process;


    ap_block_state1_pp0_stage0_iter0_grp2_assign_proc : process(fc2_embedding_1_empty_n, ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0_grp2 <= ((ap_done_reg = ap_const_logic_1) or (fc2_embedding_1_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter27, ap_done_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_idle_pp0 = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27)
    begin
        if (((ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) 
    and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to26_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26)
    begin
        if (((ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) 
    and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0))) then 
            ap_idle_pp0_0to26 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to26 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to27_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27)
    begin
        if (((ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) 
    and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0))) then 
            ap_idle_pp0_1to27 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to27 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, ap_enable_reg_pp0_iter0_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to26)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to26 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln725_1_fu_347_p1 <= reg_132;
    bitcast_ln725_fu_136_p1 <= reg_132;

    dout_0_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone_grp3_done_reg, ap_block_pp0_stage2_grp3, ap_block_pp0_stage0_grp5, ap_block_pp0_stage0_subdone_grp5_done_reg, dout_0_TREADY_int_regslice)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp5_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp5) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_grp3) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone_grp3_done_reg) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1)))) then 
            dout_0_TDATA_blk_n <= dout_0_TREADY_int_regslice;
        else 
            dout_0_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_0_TVALID <= regslice_both_dout_0_U_vld_out;

    dout_0_TVALID_int_regslice_assign_proc : process(ap_enable_reg_pp0_iter26, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone_grp3_done_reg, ap_block_pp0_stage2_11001_grp3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001_grp3) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone_grp3_done_reg) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1))) then 
            dout_0_TVALID_int_regslice <= ap_const_logic_1;
        else 
            dout_0_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    dout_1_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone_grp4_done_reg, ap_block_pp0_stage2_grp4, ap_block_pp0_stage0_grp6, ap_block_pp0_stage0_subdone_grp6_done_reg, dout_1_TREADY_int_regslice)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp6_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp6) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_grp4) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone_grp4_done_reg) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1)))) then 
            dout_1_TDATA_blk_n <= dout_1_TREADY_int_regslice;
        else 
            dout_1_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_1_TDATA_int_regslice <= 
        sub_ln299_5_fu_545_p2 when (tmp_4_reg_654(0) = '1') else 
        tmp_8_fu_523_p11;
    dout_1_TVALID <= regslice_both_dout_1_U_vld_out;

    dout_1_TVALID_int_regslice_assign_proc : process(ap_enable_reg_pp0_iter26, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone_grp4_done_reg, ap_block_pp0_stage2_11001_grp4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001_grp4) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone_grp4_done_reg) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1))) then 
            dout_1_TVALID_int_regslice <= ap_const_logic_1;
        else 
            dout_1_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    fc2_embedding_0_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, fc2_embedding_0_empty_n, ap_done_reg, ap_block_pp0_stage0_grp1, ap_block_pp0_stage0_subdone_grp1_done_reg_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_done_reg = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp1_done_reg_iter0) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp1))) then 
            fc2_embedding_0_blk_n <= fc2_embedding_0_empty_n;
        else 
            fc2_embedding_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fc2_embedding_0_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone_grp1_done_reg_iter0, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp1_done_reg_iter0))) then 
            fc2_embedding_0_read <= ap_const_logic_1;
        else 
            fc2_embedding_0_read <= ap_const_logic_0;
        end if; 
    end process;


    fc2_embedding_1_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, fc2_embedding_1_empty_n, ap_done_reg, ap_block_pp0_stage0_grp2, ap_block_pp0_stage0_subdone_grp2_done_reg_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_done_reg = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp2_done_reg_iter0) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp2))) then 
            fc2_embedding_1_blk_n <= fc2_embedding_1_empty_n;
        else 
            fc2_embedding_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fc2_embedding_1_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone_grp2_done_reg_iter0, ap_block_pp0_stage0_11001_grp2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp2_done_reg_iter0))) then 
            fc2_embedding_1_read <= ap_const_logic_1;
        else 
            fc2_embedding_1_read <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_110_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001_grp0, ap_block_pp0_stage2_subdone_grp0_done_reg, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001_grp0)))) then 
            grp_fu_110_ce <= ap_const_logic_1;
        else 
            grp_fu_110_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_110_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter13, ap_CS_fsm_pp0_stage2, tmp_reg_581, fsum_reg_591, ap_block_pp0_stage2_grp0, ap_block_pp0_stage0_grp0)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp0))) then 
            grp_fu_110_p0 <= fsum_reg_591;
        elsif (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_grp0))) then 
            grp_fu_110_p0 <= tmp_reg_581;
        else 
            grp_fu_110_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_110_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter13, ap_CS_fsm_pp0_stage2, tmp_s_reg_586_pp0_iter12_reg, ap_block_pp0_stage2_grp0, ap_block_pp0_stage0_grp0)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp0))) then 
            grp_fu_110_p1 <= tmp_s_reg_586_pp0_iter12_reg;
        elsif (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_grp0))) then 
            grp_fu_110_p1 <= ap_const_lv32_0;
        else 
            grp_fu_110_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_115_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001_grp0, ap_block_pp0_stage2_subdone_grp0_done_reg, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001_grp0)))) then 
            grp_fu_115_ce <= ap_const_logic_1;
        else 
            grp_fu_115_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_115_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_CS_fsm_pp0_stage2, vf_reg_569_pp0_iter22_reg, vf_1_reg_575_pp0_iter22_reg, ap_block_pp0_stage2_grp0, ap_block_pp0_stage0_grp0)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp0))) then 
            grp_fu_115_p0 <= vf_1_reg_575_pp0_iter22_reg;
        elsif (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_grp0))) then 
            grp_fu_115_p0 <= vf_reg_569_pp0_iter22_reg;
        else 
            grp_fu_115_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_119_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001_grp0, ap_block_pp0_stage2_subdone_grp0_done_reg, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001_grp0)))) then 
            grp_fu_119_ce <= ap_const_logic_1;
        else 
            grp_fu_119_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_119_p0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0_reg, fc2_embedding_0_read_reg_559, fc2_embedding_1_read_reg_564, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage2_grp0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_grp0))) then 
                grp_fu_119_p0 <= fc2_embedding_1_read_reg_564;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                grp_fu_119_p0 <= fc2_embedding_0_read_reg_559;
            else 
                grp_fu_119_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_119_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_122_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001_grp0, ap_block_pp0_stage2_subdone_grp0_done_reg, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001_grp0)))) then 
            grp_fu_122_ce <= ap_const_logic_1;
        else 
            grp_fu_122_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_127_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001_grp0, ap_block_pp0_stage2_subdone_grp0_done_reg, ap_block_pp0_stage0_11001_grp0, ap_block_pp0_stage0_subdone_grp0_done_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001_grp0)))) then 
            grp_fu_127_ce <= ap_const_logic_1;
        else 
            grp_fu_127_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_127_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage2, vf_reg_569, vf_1_reg_575, ap_block_pp0_stage2_grp0, ap_block_pp0_stage0_grp0)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_grp0))) then 
            grp_fu_127_p1 <= vf_1_reg_575;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_grp0))) then 
            grp_fu_127_p1 <= vf_reg_569;
        else 
            grp_fu_127_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln299_1_fu_200_p2 <= "1" when (tmp_2_fu_152_p3 = ap_const_lv8_96) else "0";
    icmp_ln299_2_fu_206_p2 <= "1" when (signed(sub_ln299_fu_186_p2) > signed(ap_const_lv9_0)) else "0";
    icmp_ln299_3_fu_212_p2 <= "1" when (signed(sub_ln299_fu_186_p2) < signed(ap_const_lv9_19)) else "0";
    icmp_ln299_4_fu_256_p2 <= "1" when (tmp_3_fu_246_p4 = ap_const_lv4_0) else "0";
    icmp_ln299_5_fu_391_p2 <= "1" when (trunc_ln299_6_fu_351_p1 = ap_const_lv31_0) else "0";
    icmp_ln299_6_fu_411_p2 <= "1" when (tmp_5_fu_363_p3 = ap_const_lv8_96) else "0";
    icmp_ln299_7_fu_417_p2 <= "1" when (signed(sub_ln299_3_fu_397_p2) > signed(ap_const_lv9_0)) else "0";
    icmp_ln299_8_fu_423_p2 <= "1" when (signed(sub_ln299_3_fu_397_p2) < signed(ap_const_lv9_19)) else "0";
    icmp_ln299_9_fu_467_p2 <= "1" when (tmp_6_fu_457_p4 = ap_const_lv4_0) else "0";
    icmp_ln299_fu_180_p2 <= "1" when (trunc_ln299_fu_140_p1 = ap_const_lv31_0) else "0";
    lshr_ln299_1_fu_433_p2 <= std_logic_vector(shift_right(unsigned(zext_ln299_6_fu_429_p1),to_integer(unsigned('0' & sext_ln299_1_fu_403_p1(31-1 downto 0)))));
    lshr_ln299_fu_222_p2 <= std_logic_vector(shift_right(unsigned(zext_ln299_1_fu_218_p1),to_integer(unsigned('0' & sext_ln299_fu_192_p1(31-1 downto 0)))));
    or_ln299_1_fu_499_p2 <= (icmp_ln299_6_reg_671 or icmp_ln299_5_reg_664);
    or_ln299_fu_288_p2 <= (icmp_ln299_reg_616 or icmp_ln299_1_reg_623);
    select_ln299_2_fu_340_p3 <= 
        sub_ln299_2_fu_334_p2 when (tmp_1_reg_606(0) = '1') else 
        tmp_7_fu_312_p11;
    select_ln299_3_fu_443_p3 <= 
        trunc_ln299_10_fu_439_p1 when (icmp_ln299_8_fu_423_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln299_fu_232_p3 <= 
        trunc_ln299_4_fu_228_p1 when (icmp_ln299_3_fu_212_p2(0) = '1') else 
        ap_const_lv8_0;
        sext_ln299_1_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln299_3_fu_397_p2),32));

        sext_ln299_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln299_fu_186_p2),32));

    shl_ln299_1_fu_477_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln299_8_fu_379_p1),to_integer(unsigned('0' & sub_ln299_4cast_fu_473_p1(8-1 downto 0)))));
    shl_ln299_fu_266_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln299_2_fu_168_p1),to_integer(unsigned('0' & sub_ln299_1cast_fu_262_p1(8-1 downto 0)))));
    sub_ln299_1_fu_240_p2 <= std_logic_vector(unsigned(ap_const_lv7_0) - unsigned(trunc_ln299_3_fu_196_p1));
    sub_ln299_1cast_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln299_1_fu_240_p2),8));
    sub_ln299_2_fu_334_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(tmp_7_fu_312_p11));
    sub_ln299_3_fu_397_p2 <= std_logic_vector(unsigned(ap_const_lv9_96) - unsigned(zext_ln299_3_fu_371_p1));
    sub_ln299_4_fu_451_p2 <= std_logic_vector(unsigned(ap_const_lv7_0) - unsigned(trunc_ln299_9_fu_407_p1));
    sub_ln299_4cast_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln299_4_fu_451_p2),8));
    sub_ln299_5_fu_545_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(tmp_8_fu_523_p11));
    sub_ln299_fu_186_p2 <= std_logic_vector(unsigned(ap_const_lv9_96) - unsigned(zext_ln299_fu_160_p1));
    tmp_2_fu_152_p3 <= bitcast_ln725_fu_136_p1(30 downto 23);
    tmp_3_fu_246_p4 <= sub_ln299_1_fu_240_p2(6 downto 3);
    tmp_5_fu_363_p3 <= bitcast_ln725_1_fu_347_p1(30 downto 23);
    tmp_6_fu_457_p4 <= sub_ln299_4_fu_451_p2(6 downto 3);
    tmp_7_fu_312_p10 <= ((icmp_ln299_reg_616 & and_ln299_fu_283_p2) & and_ln299_1_fu_298_p2);
    tmp_7_fu_312_p8 <= 
        shl_ln299_reg_644 when (icmp_ln299_4_reg_639(0) = '1') else 
        ap_const_lv8_0;
    tmp_7_fu_312_p9 <= "XXXXXXXX";
    tmp_8_fu_523_p10 <= ((icmp_ln299_5_reg_664 & and_ln299_2_fu_494_p2) & and_ln299_3_fu_509_p2);
    tmp_8_fu_523_p8 <= 
        shl_ln299_1_reg_692 when (icmp_ln299_9_reg_687(0) = '1') else 
        ap_const_lv8_0;
    tmp_8_fu_523_p9 <= "XXXXXXXX";
    trunc_ln299_10_fu_439_p1 <= lshr_ln299_1_fu_433_p2(8 - 1 downto 0);
    trunc_ln299_1_fu_164_p1 <= bitcast_ln725_fu_136_p1(23 - 1 downto 0);
    trunc_ln299_2_fu_168_p1 <= bitcast_ln725_fu_136_p1(8 - 1 downto 0);
    trunc_ln299_3_fu_196_p1 <= sub_ln299_fu_186_p2(7 - 1 downto 0);
    trunc_ln299_4_fu_228_p1 <= lshr_ln299_fu_222_p2(8 - 1 downto 0);
    trunc_ln299_6_fu_351_p1 <= bitcast_ln725_1_fu_347_p1(31 - 1 downto 0);
    trunc_ln299_7_fu_375_p1 <= bitcast_ln725_1_fu_347_p1(23 - 1 downto 0);
    trunc_ln299_8_fu_379_p1 <= bitcast_ln725_1_fu_347_p1(8 - 1 downto 0);
    trunc_ln299_9_fu_407_p1 <= sub_ln299_3_fu_397_p2(7 - 1 downto 0);
    trunc_ln299_fu_140_p1 <= bitcast_ln725_fu_136_p1(31 - 1 downto 0);
    xor_ln299_1_fu_292_p2 <= (or_ln299_fu_288_p2 xor ap_const_lv1_1);
    xor_ln299_2_fu_489_p2 <= (icmp_ln299_5_reg_664 xor ap_const_lv1_1);
    xor_ln299_3_fu_503_p2 <= (or_ln299_1_fu_499_p2 xor ap_const_lv1_1);
    xor_ln299_fu_278_p2 <= (icmp_ln299_reg_616 xor ap_const_lv1_1);
    zext_ln299_1_cast_fu_172_p3 <= (ap_const_lv1_1 & trunc_ln299_1_fu_164_p1);
    zext_ln299_1_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln299_1_cast_fu_172_p3),32));
    zext_ln299_3_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_363_p3),9));
    zext_ln299_6_cast_fu_383_p3 <= (ap_const_lv1_1 & trunc_ln299_7_fu_375_p1);
    zext_ln299_6_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln299_6_cast_fu_383_p3),32));
    zext_ln299_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_152_p3),9));
end behav;

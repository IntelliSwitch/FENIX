-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CNN_stream_feature_concate_layer_stream_9u_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    len_x_embedding_0_dout : IN STD_LOGIC_VECTOR (319 downto 0);
    len_x_embedding_0_empty_n : IN STD_LOGIC;
    len_x_embedding_0_read : OUT STD_LOGIC;
    len_x_embedding_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    len_x_embedding_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    len_x_embedding_1_dout : IN STD_LOGIC_VECTOR (319 downto 0);
    len_x_embedding_1_empty_n : IN STD_LOGIC;
    len_x_embedding_1_read : OUT STD_LOGIC;
    len_x_embedding_1_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    len_x_embedding_1_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    len_x_embedding_2_dout : IN STD_LOGIC_VECTOR (319 downto 0);
    len_x_embedding_2_empty_n : IN STD_LOGIC;
    len_x_embedding_2_read : OUT STD_LOGIC;
    len_x_embedding_2_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    len_x_embedding_2_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    len_x_embedding_3_dout : IN STD_LOGIC_VECTOR (319 downto 0);
    len_x_embedding_3_empty_n : IN STD_LOGIC;
    len_x_embedding_3_read : OUT STD_LOGIC;
    len_x_embedding_3_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    len_x_embedding_3_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    len_x_embedding_4_dout : IN STD_LOGIC_VECTOR (319 downto 0);
    len_x_embedding_4_empty_n : IN STD_LOGIC;
    len_x_embedding_4_read : OUT STD_LOGIC;
    len_x_embedding_4_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    len_x_embedding_4_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    len_x_embedding_5_dout : IN STD_LOGIC_VECTOR (319 downto 0);
    len_x_embedding_5_empty_n : IN STD_LOGIC;
    len_x_embedding_5_read : OUT STD_LOGIC;
    len_x_embedding_5_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    len_x_embedding_5_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    len_x_embedding_6_dout : IN STD_LOGIC_VECTOR (319 downto 0);
    len_x_embedding_6_empty_n : IN STD_LOGIC;
    len_x_embedding_6_read : OUT STD_LOGIC;
    len_x_embedding_6_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    len_x_embedding_6_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    len_x_embedding_7_dout : IN STD_LOGIC_VECTOR (319 downto 0);
    len_x_embedding_7_empty_n : IN STD_LOGIC;
    len_x_embedding_7_read : OUT STD_LOGIC;
    len_x_embedding_7_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    len_x_embedding_7_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    len_x_embedding_8_dout : IN STD_LOGIC_VECTOR (319 downto 0);
    len_x_embedding_8_empty_n : IN STD_LOGIC;
    len_x_embedding_8_read : OUT STD_LOGIC;
    len_x_embedding_8_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    len_x_embedding_8_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    ipd_x_embedding_0_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    ipd_x_embedding_0_empty_n : IN STD_LOGIC;
    ipd_x_embedding_0_read : OUT STD_LOGIC;
    ipd_x_embedding_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    ipd_x_embedding_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    ipd_x_embedding_1_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    ipd_x_embedding_1_empty_n : IN STD_LOGIC;
    ipd_x_embedding_1_read : OUT STD_LOGIC;
    ipd_x_embedding_1_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    ipd_x_embedding_1_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    ipd_x_embedding_2_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    ipd_x_embedding_2_empty_n : IN STD_LOGIC;
    ipd_x_embedding_2_read : OUT STD_LOGIC;
    ipd_x_embedding_2_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    ipd_x_embedding_2_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    ipd_x_embedding_3_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    ipd_x_embedding_3_empty_n : IN STD_LOGIC;
    ipd_x_embedding_3_read : OUT STD_LOGIC;
    ipd_x_embedding_3_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    ipd_x_embedding_3_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    ipd_x_embedding_4_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    ipd_x_embedding_4_empty_n : IN STD_LOGIC;
    ipd_x_embedding_4_read : OUT STD_LOGIC;
    ipd_x_embedding_4_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    ipd_x_embedding_4_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    ipd_x_embedding_5_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    ipd_x_embedding_5_empty_n : IN STD_LOGIC;
    ipd_x_embedding_5_read : OUT STD_LOGIC;
    ipd_x_embedding_5_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    ipd_x_embedding_5_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    ipd_x_embedding_6_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    ipd_x_embedding_6_empty_n : IN STD_LOGIC;
    ipd_x_embedding_6_read : OUT STD_LOGIC;
    ipd_x_embedding_6_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    ipd_x_embedding_6_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    ipd_x_embedding_7_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    ipd_x_embedding_7_empty_n : IN STD_LOGIC;
    ipd_x_embedding_7_read : OUT STD_LOGIC;
    ipd_x_embedding_7_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    ipd_x_embedding_7_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    ipd_x_embedding_8_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    ipd_x_embedding_8_empty_n : IN STD_LOGIC;
    ipd_x_embedding_8_read : OUT STD_LOGIC;
    ipd_x_embedding_8_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    ipd_x_embedding_8_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    feature_embedding_0_din : OUT STD_LOGIC_VECTOR (575 downto 0);
    feature_embedding_0_full_n : IN STD_LOGIC;
    feature_embedding_0_write : OUT STD_LOGIC;
    feature_embedding_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    feature_embedding_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    feature_embedding_1_din : OUT STD_LOGIC_VECTOR (575 downto 0);
    feature_embedding_1_full_n : IN STD_LOGIC;
    feature_embedding_1_write : OUT STD_LOGIC;
    feature_embedding_1_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    feature_embedding_1_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    feature_embedding_2_din : OUT STD_LOGIC_VECTOR (575 downto 0);
    feature_embedding_2_full_n : IN STD_LOGIC;
    feature_embedding_2_write : OUT STD_LOGIC;
    feature_embedding_2_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    feature_embedding_2_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    feature_embedding_3_din : OUT STD_LOGIC_VECTOR (575 downto 0);
    feature_embedding_3_full_n : IN STD_LOGIC;
    feature_embedding_3_write : OUT STD_LOGIC;
    feature_embedding_3_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    feature_embedding_3_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    feature_embedding_4_din : OUT STD_LOGIC_VECTOR (575 downto 0);
    feature_embedding_4_full_n : IN STD_LOGIC;
    feature_embedding_4_write : OUT STD_LOGIC;
    feature_embedding_4_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    feature_embedding_4_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    feature_embedding_5_din : OUT STD_LOGIC_VECTOR (575 downto 0);
    feature_embedding_5_full_n : IN STD_LOGIC;
    feature_embedding_5_write : OUT STD_LOGIC;
    feature_embedding_5_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    feature_embedding_5_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    feature_embedding_6_din : OUT STD_LOGIC_VECTOR (575 downto 0);
    feature_embedding_6_full_n : IN STD_LOGIC;
    feature_embedding_6_write : OUT STD_LOGIC;
    feature_embedding_6_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    feature_embedding_6_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    feature_embedding_7_din : OUT STD_LOGIC_VECTOR (575 downto 0);
    feature_embedding_7_full_n : IN STD_LOGIC;
    feature_embedding_7_write : OUT STD_LOGIC;
    feature_embedding_7_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    feature_embedding_7_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    feature_embedding_8_din : OUT STD_LOGIC_VECTOR (575 downto 0);
    feature_embedding_8_full_n : IN STD_LOGIC;
    feature_embedding_8_write : OUT STD_LOGIC;
    feature_embedding_8_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    feature_embedding_8_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0) );
end;


architecture behav of CNN_stream_feature_concate_layer_stream_9u_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal len_x_embedding_0_blk_n : STD_LOGIC;
    signal len_x_embedding_1_blk_n : STD_LOGIC;
    signal len_x_embedding_2_blk_n : STD_LOGIC;
    signal len_x_embedding_3_blk_n : STD_LOGIC;
    signal len_x_embedding_4_blk_n : STD_LOGIC;
    signal len_x_embedding_5_blk_n : STD_LOGIC;
    signal len_x_embedding_6_blk_n : STD_LOGIC;
    signal len_x_embedding_7_blk_n : STD_LOGIC;
    signal len_x_embedding_8_blk_n : STD_LOGIC;
    signal ipd_x_embedding_0_blk_n : STD_LOGIC;
    signal ipd_x_embedding_1_blk_n : STD_LOGIC;
    signal ipd_x_embedding_2_blk_n : STD_LOGIC;
    signal ipd_x_embedding_3_blk_n : STD_LOGIC;
    signal ipd_x_embedding_4_blk_n : STD_LOGIC;
    signal ipd_x_embedding_5_blk_n : STD_LOGIC;
    signal ipd_x_embedding_6_blk_n : STD_LOGIC;
    signal ipd_x_embedding_7_blk_n : STD_LOGIC;
    signal ipd_x_embedding_8_blk_n : STD_LOGIC;
    signal feature_embedding_0_blk_n : STD_LOGIC;
    signal feature_embedding_1_blk_n : STD_LOGIC;
    signal feature_embedding_2_blk_n : STD_LOGIC;
    signal feature_embedding_3_blk_n : STD_LOGIC;
    signal feature_embedding_4_blk_n : STD_LOGIC;
    signal feature_embedding_5_blk_n : STD_LOGIC;
    signal feature_embedding_6_blk_n : STD_LOGIC;
    signal feature_embedding_7_blk_n : STD_LOGIC;
    signal feature_embedding_8_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, len_x_embedding_0_empty_n, len_x_embedding_1_empty_n, len_x_embedding_2_empty_n, len_x_embedding_3_empty_n, len_x_embedding_4_empty_n, len_x_embedding_5_empty_n, len_x_embedding_6_empty_n, len_x_embedding_7_empty_n, len_x_embedding_8_empty_n, ipd_x_embedding_0_empty_n, ipd_x_embedding_1_empty_n, ipd_x_embedding_2_empty_n, ipd_x_embedding_3_empty_n, ipd_x_embedding_4_empty_n, ipd_x_embedding_5_empty_n, ipd_x_embedding_6_empty_n, ipd_x_embedding_7_empty_n, ipd_x_embedding_8_empty_n, feature_embedding_0_full_n, feature_embedding_1_full_n, feature_embedding_2_full_n, feature_embedding_3_full_n, feature_embedding_4_full_n, feature_embedding_5_full_n, feature_embedding_6_full_n, feature_embedding_7_full_n, feature_embedding_8_full_n)
    begin
                ap_block_state1 <= ((ipd_x_embedding_1_empty_n = ap_const_logic_0) or (ipd_x_embedding_0_empty_n = ap_const_logic_0) or (len_x_embedding_8_empty_n = ap_const_logic_0) or (len_x_embedding_7_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (len_x_embedding_6_empty_n = ap_const_logic_0) or (len_x_embedding_5_empty_n = ap_const_logic_0) or (len_x_embedding_4_empty_n = ap_const_logic_0) or (len_x_embedding_3_empty_n = ap_const_logic_0) or (len_x_embedding_2_empty_n = ap_const_logic_0) or (len_x_embedding_1_empty_n = ap_const_logic_0) or (len_x_embedding_0_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (feature_embedding_8_full_n = ap_const_logic_0) or (feature_embedding_7_full_n = ap_const_logic_0) or (feature_embedding_6_full_n = ap_const_logic_0) or (feature_embedding_5_full_n = ap_const_logic_0) or (feature_embedding_4_full_n = ap_const_logic_0) or (feature_embedding_3_full_n = ap_const_logic_0) or (feature_embedding_2_full_n = ap_const_logic_0) or (feature_embedding_1_full_n = ap_const_logic_0) 
    or (feature_embedding_0_full_n = ap_const_logic_0) or (ipd_x_embedding_8_empty_n = ap_const_logic_0) or (ipd_x_embedding_7_empty_n = ap_const_logic_0) or (ipd_x_embedding_6_empty_n = ap_const_logic_0) or (ipd_x_embedding_5_empty_n = ap_const_logic_0) or (ipd_x_embedding_4_empty_n = ap_const_logic_0) or (ipd_x_embedding_3_empty_n = ap_const_logic_0) or (ipd_x_embedding_2_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    feature_embedding_0_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, feature_embedding_0_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            feature_embedding_0_blk_n <= feature_embedding_0_full_n;
        else 
            feature_embedding_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    feature_embedding_0_din <= (ipd_x_embedding_0_dout & len_x_embedding_0_dout);

    feature_embedding_0_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            feature_embedding_0_write <= ap_const_logic_1;
        else 
            feature_embedding_0_write <= ap_const_logic_0;
        end if; 
    end process;


    feature_embedding_1_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, feature_embedding_1_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            feature_embedding_1_blk_n <= feature_embedding_1_full_n;
        else 
            feature_embedding_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    feature_embedding_1_din <= (ipd_x_embedding_1_dout & len_x_embedding_1_dout);

    feature_embedding_1_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            feature_embedding_1_write <= ap_const_logic_1;
        else 
            feature_embedding_1_write <= ap_const_logic_0;
        end if; 
    end process;


    feature_embedding_2_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, feature_embedding_2_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            feature_embedding_2_blk_n <= feature_embedding_2_full_n;
        else 
            feature_embedding_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    feature_embedding_2_din <= (ipd_x_embedding_2_dout & len_x_embedding_2_dout);

    feature_embedding_2_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            feature_embedding_2_write <= ap_const_logic_1;
        else 
            feature_embedding_2_write <= ap_const_logic_0;
        end if; 
    end process;


    feature_embedding_3_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, feature_embedding_3_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            feature_embedding_3_blk_n <= feature_embedding_3_full_n;
        else 
            feature_embedding_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    feature_embedding_3_din <= (ipd_x_embedding_3_dout & len_x_embedding_3_dout);

    feature_embedding_3_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            feature_embedding_3_write <= ap_const_logic_1;
        else 
            feature_embedding_3_write <= ap_const_logic_0;
        end if; 
    end process;


    feature_embedding_4_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, feature_embedding_4_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            feature_embedding_4_blk_n <= feature_embedding_4_full_n;
        else 
            feature_embedding_4_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    feature_embedding_4_din <= (ipd_x_embedding_4_dout & len_x_embedding_4_dout);

    feature_embedding_4_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            feature_embedding_4_write <= ap_const_logic_1;
        else 
            feature_embedding_4_write <= ap_const_logic_0;
        end if; 
    end process;


    feature_embedding_5_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, feature_embedding_5_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            feature_embedding_5_blk_n <= feature_embedding_5_full_n;
        else 
            feature_embedding_5_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    feature_embedding_5_din <= (ipd_x_embedding_5_dout & len_x_embedding_5_dout);

    feature_embedding_5_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            feature_embedding_5_write <= ap_const_logic_1;
        else 
            feature_embedding_5_write <= ap_const_logic_0;
        end if; 
    end process;


    feature_embedding_6_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, feature_embedding_6_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            feature_embedding_6_blk_n <= feature_embedding_6_full_n;
        else 
            feature_embedding_6_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    feature_embedding_6_din <= (ipd_x_embedding_6_dout & len_x_embedding_6_dout);

    feature_embedding_6_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            feature_embedding_6_write <= ap_const_logic_1;
        else 
            feature_embedding_6_write <= ap_const_logic_0;
        end if; 
    end process;


    feature_embedding_7_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, feature_embedding_7_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            feature_embedding_7_blk_n <= feature_embedding_7_full_n;
        else 
            feature_embedding_7_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    feature_embedding_7_din <= (ipd_x_embedding_7_dout & len_x_embedding_7_dout);

    feature_embedding_7_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            feature_embedding_7_write <= ap_const_logic_1;
        else 
            feature_embedding_7_write <= ap_const_logic_0;
        end if; 
    end process;


    feature_embedding_8_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, feature_embedding_8_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            feature_embedding_8_blk_n <= feature_embedding_8_full_n;
        else 
            feature_embedding_8_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    feature_embedding_8_din <= (ipd_x_embedding_8_dout & len_x_embedding_8_dout);

    feature_embedding_8_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            feature_embedding_8_write <= ap_const_logic_1;
        else 
            feature_embedding_8_write <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ipd_x_embedding_0_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ipd_x_embedding_0_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ipd_x_embedding_0_blk_n <= ipd_x_embedding_0_empty_n;
        else 
            ipd_x_embedding_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ipd_x_embedding_0_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ipd_x_embedding_0_read <= ap_const_logic_1;
        else 
            ipd_x_embedding_0_read <= ap_const_logic_0;
        end if; 
    end process;


    ipd_x_embedding_1_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ipd_x_embedding_1_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ipd_x_embedding_1_blk_n <= ipd_x_embedding_1_empty_n;
        else 
            ipd_x_embedding_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ipd_x_embedding_1_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ipd_x_embedding_1_read <= ap_const_logic_1;
        else 
            ipd_x_embedding_1_read <= ap_const_logic_0;
        end if; 
    end process;


    ipd_x_embedding_2_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ipd_x_embedding_2_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ipd_x_embedding_2_blk_n <= ipd_x_embedding_2_empty_n;
        else 
            ipd_x_embedding_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ipd_x_embedding_2_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ipd_x_embedding_2_read <= ap_const_logic_1;
        else 
            ipd_x_embedding_2_read <= ap_const_logic_0;
        end if; 
    end process;


    ipd_x_embedding_3_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ipd_x_embedding_3_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ipd_x_embedding_3_blk_n <= ipd_x_embedding_3_empty_n;
        else 
            ipd_x_embedding_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ipd_x_embedding_3_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ipd_x_embedding_3_read <= ap_const_logic_1;
        else 
            ipd_x_embedding_3_read <= ap_const_logic_0;
        end if; 
    end process;


    ipd_x_embedding_4_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ipd_x_embedding_4_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ipd_x_embedding_4_blk_n <= ipd_x_embedding_4_empty_n;
        else 
            ipd_x_embedding_4_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ipd_x_embedding_4_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ipd_x_embedding_4_read <= ap_const_logic_1;
        else 
            ipd_x_embedding_4_read <= ap_const_logic_0;
        end if; 
    end process;


    ipd_x_embedding_5_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ipd_x_embedding_5_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ipd_x_embedding_5_blk_n <= ipd_x_embedding_5_empty_n;
        else 
            ipd_x_embedding_5_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ipd_x_embedding_5_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ipd_x_embedding_5_read <= ap_const_logic_1;
        else 
            ipd_x_embedding_5_read <= ap_const_logic_0;
        end if; 
    end process;


    ipd_x_embedding_6_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ipd_x_embedding_6_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ipd_x_embedding_6_blk_n <= ipd_x_embedding_6_empty_n;
        else 
            ipd_x_embedding_6_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ipd_x_embedding_6_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ipd_x_embedding_6_read <= ap_const_logic_1;
        else 
            ipd_x_embedding_6_read <= ap_const_logic_0;
        end if; 
    end process;


    ipd_x_embedding_7_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ipd_x_embedding_7_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ipd_x_embedding_7_blk_n <= ipd_x_embedding_7_empty_n;
        else 
            ipd_x_embedding_7_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ipd_x_embedding_7_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ipd_x_embedding_7_read <= ap_const_logic_1;
        else 
            ipd_x_embedding_7_read <= ap_const_logic_0;
        end if; 
    end process;


    ipd_x_embedding_8_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ipd_x_embedding_8_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ipd_x_embedding_8_blk_n <= ipd_x_embedding_8_empty_n;
        else 
            ipd_x_embedding_8_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ipd_x_embedding_8_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ipd_x_embedding_8_read <= ap_const_logic_1;
        else 
            ipd_x_embedding_8_read <= ap_const_logic_0;
        end if; 
    end process;


    len_x_embedding_0_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, len_x_embedding_0_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            len_x_embedding_0_blk_n <= len_x_embedding_0_empty_n;
        else 
            len_x_embedding_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    len_x_embedding_0_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            len_x_embedding_0_read <= ap_const_logic_1;
        else 
            len_x_embedding_0_read <= ap_const_logic_0;
        end if; 
    end process;


    len_x_embedding_1_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, len_x_embedding_1_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            len_x_embedding_1_blk_n <= len_x_embedding_1_empty_n;
        else 
            len_x_embedding_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    len_x_embedding_1_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            len_x_embedding_1_read <= ap_const_logic_1;
        else 
            len_x_embedding_1_read <= ap_const_logic_0;
        end if; 
    end process;


    len_x_embedding_2_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, len_x_embedding_2_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            len_x_embedding_2_blk_n <= len_x_embedding_2_empty_n;
        else 
            len_x_embedding_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    len_x_embedding_2_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            len_x_embedding_2_read <= ap_const_logic_1;
        else 
            len_x_embedding_2_read <= ap_const_logic_0;
        end if; 
    end process;


    len_x_embedding_3_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, len_x_embedding_3_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            len_x_embedding_3_blk_n <= len_x_embedding_3_empty_n;
        else 
            len_x_embedding_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    len_x_embedding_3_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            len_x_embedding_3_read <= ap_const_logic_1;
        else 
            len_x_embedding_3_read <= ap_const_logic_0;
        end if; 
    end process;


    len_x_embedding_4_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, len_x_embedding_4_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            len_x_embedding_4_blk_n <= len_x_embedding_4_empty_n;
        else 
            len_x_embedding_4_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    len_x_embedding_4_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            len_x_embedding_4_read <= ap_const_logic_1;
        else 
            len_x_embedding_4_read <= ap_const_logic_0;
        end if; 
    end process;


    len_x_embedding_5_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, len_x_embedding_5_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            len_x_embedding_5_blk_n <= len_x_embedding_5_empty_n;
        else 
            len_x_embedding_5_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    len_x_embedding_5_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            len_x_embedding_5_read <= ap_const_logic_1;
        else 
            len_x_embedding_5_read <= ap_const_logic_0;
        end if; 
    end process;


    len_x_embedding_6_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, len_x_embedding_6_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            len_x_embedding_6_blk_n <= len_x_embedding_6_empty_n;
        else 
            len_x_embedding_6_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    len_x_embedding_6_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            len_x_embedding_6_read <= ap_const_logic_1;
        else 
            len_x_embedding_6_read <= ap_const_logic_0;
        end if; 
    end process;


    len_x_embedding_7_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, len_x_embedding_7_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            len_x_embedding_7_blk_n <= len_x_embedding_7_empty_n;
        else 
            len_x_embedding_7_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    len_x_embedding_7_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            len_x_embedding_7_read <= ap_const_logic_1;
        else 
            len_x_embedding_7_read <= ap_const_logic_0;
        end if; 
    end process;


    len_x_embedding_8_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, len_x_embedding_8_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            len_x_embedding_8_blk_n <= len_x_embedding_8_empty_n;
        else 
            len_x_embedding_8_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    len_x_embedding_8_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            len_x_embedding_8_read <= ap_const_logic_1;
        else 
            len_x_embedding_8_read <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;

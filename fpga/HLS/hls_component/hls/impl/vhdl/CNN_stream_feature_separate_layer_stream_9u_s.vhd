-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CNN_stream_feature_separate_layer_stream_9u_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    din_TDATA : IN STD_LOGIC_VECTOR (143 downto 0);
    din_TVALID : IN STD_LOGIC;
    din_TREADY : OUT STD_LOGIC;
    len_x_0_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    len_x_0_full_n : IN STD_LOGIC;
    len_x_0_write : OUT STD_LOGIC;
    len_x_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    len_x_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    len_x_1_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    len_x_1_full_n : IN STD_LOGIC;
    len_x_1_write : OUT STD_LOGIC;
    len_x_1_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    len_x_1_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    len_x_2_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    len_x_2_full_n : IN STD_LOGIC;
    len_x_2_write : OUT STD_LOGIC;
    len_x_2_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    len_x_2_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    len_x_3_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    len_x_3_full_n : IN STD_LOGIC;
    len_x_3_write : OUT STD_LOGIC;
    len_x_3_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    len_x_3_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    len_x_4_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    len_x_4_full_n : IN STD_LOGIC;
    len_x_4_write : OUT STD_LOGIC;
    len_x_4_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    len_x_4_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    len_x_5_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    len_x_5_full_n : IN STD_LOGIC;
    len_x_5_write : OUT STD_LOGIC;
    len_x_5_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    len_x_5_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    len_x_6_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    len_x_6_full_n : IN STD_LOGIC;
    len_x_6_write : OUT STD_LOGIC;
    len_x_6_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    len_x_6_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    len_x_7_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    len_x_7_full_n : IN STD_LOGIC;
    len_x_7_write : OUT STD_LOGIC;
    len_x_7_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    len_x_7_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    len_x_8_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    len_x_8_full_n : IN STD_LOGIC;
    len_x_8_write : OUT STD_LOGIC;
    len_x_8_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    len_x_8_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    ipd_x_0_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    ipd_x_0_full_n : IN STD_LOGIC;
    ipd_x_0_write : OUT STD_LOGIC;
    ipd_x_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    ipd_x_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    ipd_x_1_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    ipd_x_1_full_n : IN STD_LOGIC;
    ipd_x_1_write : OUT STD_LOGIC;
    ipd_x_1_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    ipd_x_1_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    ipd_x_2_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    ipd_x_2_full_n : IN STD_LOGIC;
    ipd_x_2_write : OUT STD_LOGIC;
    ipd_x_2_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    ipd_x_2_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    ipd_x_3_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    ipd_x_3_full_n : IN STD_LOGIC;
    ipd_x_3_write : OUT STD_LOGIC;
    ipd_x_3_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    ipd_x_3_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    ipd_x_4_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    ipd_x_4_full_n : IN STD_LOGIC;
    ipd_x_4_write : OUT STD_LOGIC;
    ipd_x_4_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    ipd_x_4_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    ipd_x_5_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    ipd_x_5_full_n : IN STD_LOGIC;
    ipd_x_5_write : OUT STD_LOGIC;
    ipd_x_5_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    ipd_x_5_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    ipd_x_6_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    ipd_x_6_full_n : IN STD_LOGIC;
    ipd_x_6_write : OUT STD_LOGIC;
    ipd_x_6_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    ipd_x_6_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    ipd_x_7_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    ipd_x_7_full_n : IN STD_LOGIC;
    ipd_x_7_write : OUT STD_LOGIC;
    ipd_x_7_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    ipd_x_7_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    ipd_x_8_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    ipd_x_8_full_n : IN STD_LOGIC;
    ipd_x_8_write : OUT STD_LOGIC;
    ipd_x_8_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    ipd_x_8_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0) );
end;


architecture behav of CNN_stream_feature_separate_layer_stream_9u_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011000";
    constant ap_const_lv64_20 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000";
    constant ap_const_lv64_28 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101000";
    constant ap_const_lv64_30 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110000";
    constant ap_const_lv64_38 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111000";
    constant ap_const_lv64_40 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000";
    constant ap_const_lv64_48 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001001000";
    constant ap_const_lv64_50 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001010000";
    constant ap_const_lv64_58 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001011000";
    constant ap_const_lv64_60 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001100000";
    constant ap_const_lv64_68 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001101000";
    constant ap_const_lv64_70 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001110000";
    constant ap_const_lv64_78 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001111000";
    constant ap_const_lv64_80 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000";
    constant ap_const_lv64_88 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000010001000";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal din_TDATA_blk_n : STD_LOGIC;
    signal len_x_0_blk_n : STD_LOGIC;
    signal len_x_1_blk_n : STD_LOGIC;
    signal len_x_2_blk_n : STD_LOGIC;
    signal len_x_3_blk_n : STD_LOGIC;
    signal len_x_4_blk_n : STD_LOGIC;
    signal len_x_5_blk_n : STD_LOGIC;
    signal len_x_6_blk_n : STD_LOGIC;
    signal len_x_7_blk_n : STD_LOGIC;
    signal len_x_8_blk_n : STD_LOGIC;
    signal ipd_x_0_blk_n : STD_LOGIC;
    signal ipd_x_1_blk_n : STD_LOGIC;
    signal ipd_x_2_blk_n : STD_LOGIC;
    signal ipd_x_3_blk_n : STD_LOGIC;
    signal ipd_x_4_blk_n : STD_LOGIC;
    signal ipd_x_5_blk_n : STD_LOGIC;
    signal ipd_x_6_blk_n : STD_LOGIC;
    signal ipd_x_7_blk_n : STD_LOGIC;
    signal ipd_x_8_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal regslice_both_din_U_apdone_blk : STD_LOGIC;
    signal din_TDATA_int_regslice : STD_LOGIC_VECTOR (143 downto 0);
    signal din_TVALID_int_regslice : STD_LOGIC;
    signal din_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_din_U_ack_in : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component CNN_stream_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_din_U : component CNN_stream_regslice_both
    generic map (
        DataWidth => 144)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => din_TDATA,
        vld_in => din_TVALID,
        ack_in => regslice_both_din_U_ack_in,
        data_out => din_TDATA_int_regslice,
        vld_out => din_TVALID_int_regslice,
        ack_out => din_TREADY_int_regslice,
        apdone_blk => regslice_both_din_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, len_x_0_full_n, len_x_1_full_n, len_x_2_full_n, len_x_3_full_n, len_x_4_full_n, len_x_5_full_n, len_x_6_full_n, len_x_7_full_n, len_x_8_full_n, ipd_x_0_full_n, ipd_x_1_full_n, ipd_x_2_full_n, ipd_x_3_full_n, ipd_x_4_full_n, ipd_x_5_full_n, ipd_x_6_full_n, ipd_x_7_full_n, ipd_x_8_full_n, din_TVALID_int_regslice)
    begin
                ap_block_state1 <= ((ipd_x_0_full_n = ap_const_logic_0) or (len_x_8_full_n = ap_const_logic_0) or (len_x_7_full_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (len_x_6_full_n = ap_const_logic_0) or (len_x_5_full_n = ap_const_logic_0) or (len_x_4_full_n = ap_const_logic_0) or (len_x_3_full_n = ap_const_logic_0) or (len_x_2_full_n = ap_const_logic_0) or (len_x_1_full_n = ap_const_logic_0) or (len_x_0_full_n = ap_const_logic_0) or (din_TVALID_int_regslice = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ipd_x_8_full_n = ap_const_logic_0) or (ipd_x_7_full_n = ap_const_logic_0) or (ipd_x_6_full_n = ap_const_logic_0) or (ipd_x_5_full_n = ap_const_logic_0) or (ipd_x_4_full_n = ap_const_logic_0) or (ipd_x_3_full_n = ap_const_logic_0) or (ipd_x_2_full_n = ap_const_logic_0) or (ipd_x_1_full_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    din_TDATA_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, din_TVALID_int_regslice)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            din_TDATA_blk_n <= din_TVALID_int_regslice;
        else 
            din_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    din_TREADY <= regslice_both_din_U_ack_in;

    din_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            din_TREADY_int_regslice <= ap_const_logic_1;
        else 
            din_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ipd_x_0_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ipd_x_0_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ipd_x_0_blk_n <= ipd_x_0_full_n;
        else 
            ipd_x_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ipd_x_0_din <= din_TDATA_int_regslice(15 downto 8);

    ipd_x_0_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ipd_x_0_write <= ap_const_logic_1;
        else 
            ipd_x_0_write <= ap_const_logic_0;
        end if; 
    end process;


    ipd_x_1_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ipd_x_1_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ipd_x_1_blk_n <= ipd_x_1_full_n;
        else 
            ipd_x_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ipd_x_1_din <= din_TDATA_int_regslice(31 downto 24);

    ipd_x_1_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ipd_x_1_write <= ap_const_logic_1;
        else 
            ipd_x_1_write <= ap_const_logic_0;
        end if; 
    end process;


    ipd_x_2_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ipd_x_2_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ipd_x_2_blk_n <= ipd_x_2_full_n;
        else 
            ipd_x_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ipd_x_2_din <= din_TDATA_int_regslice(47 downto 40);

    ipd_x_2_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ipd_x_2_write <= ap_const_logic_1;
        else 
            ipd_x_2_write <= ap_const_logic_0;
        end if; 
    end process;


    ipd_x_3_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ipd_x_3_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ipd_x_3_blk_n <= ipd_x_3_full_n;
        else 
            ipd_x_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ipd_x_3_din <= din_TDATA_int_regslice(63 downto 56);

    ipd_x_3_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ipd_x_3_write <= ap_const_logic_1;
        else 
            ipd_x_3_write <= ap_const_logic_0;
        end if; 
    end process;


    ipd_x_4_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ipd_x_4_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ipd_x_4_blk_n <= ipd_x_4_full_n;
        else 
            ipd_x_4_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ipd_x_4_din <= din_TDATA_int_regslice(79 downto 72);

    ipd_x_4_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ipd_x_4_write <= ap_const_logic_1;
        else 
            ipd_x_4_write <= ap_const_logic_0;
        end if; 
    end process;


    ipd_x_5_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ipd_x_5_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ipd_x_5_blk_n <= ipd_x_5_full_n;
        else 
            ipd_x_5_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ipd_x_5_din <= din_TDATA_int_regslice(95 downto 88);

    ipd_x_5_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ipd_x_5_write <= ap_const_logic_1;
        else 
            ipd_x_5_write <= ap_const_logic_0;
        end if; 
    end process;


    ipd_x_6_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ipd_x_6_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ipd_x_6_blk_n <= ipd_x_6_full_n;
        else 
            ipd_x_6_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ipd_x_6_din <= din_TDATA_int_regslice(111 downto 104);

    ipd_x_6_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ipd_x_6_write <= ap_const_logic_1;
        else 
            ipd_x_6_write <= ap_const_logic_0;
        end if; 
    end process;


    ipd_x_7_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ipd_x_7_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ipd_x_7_blk_n <= ipd_x_7_full_n;
        else 
            ipd_x_7_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ipd_x_7_din <= din_TDATA_int_regslice(127 downto 120);

    ipd_x_7_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ipd_x_7_write <= ap_const_logic_1;
        else 
            ipd_x_7_write <= ap_const_logic_0;
        end if; 
    end process;


    ipd_x_8_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ipd_x_8_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ipd_x_8_blk_n <= ipd_x_8_full_n;
        else 
            ipd_x_8_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ipd_x_8_din <= din_TDATA_int_regslice(143 downto 136);

    ipd_x_8_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ipd_x_8_write <= ap_const_logic_1;
        else 
            ipd_x_8_write <= ap_const_logic_0;
        end if; 
    end process;


    len_x_0_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, len_x_0_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            len_x_0_blk_n <= len_x_0_full_n;
        else 
            len_x_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    len_x_0_din <= din_TDATA_int_regslice(8 - 1 downto 0);

    len_x_0_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            len_x_0_write <= ap_const_logic_1;
        else 
            len_x_0_write <= ap_const_logic_0;
        end if; 
    end process;


    len_x_1_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, len_x_1_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            len_x_1_blk_n <= len_x_1_full_n;
        else 
            len_x_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    len_x_1_din <= din_TDATA_int_regslice(23 downto 16);

    len_x_1_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            len_x_1_write <= ap_const_logic_1;
        else 
            len_x_1_write <= ap_const_logic_0;
        end if; 
    end process;


    len_x_2_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, len_x_2_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            len_x_2_blk_n <= len_x_2_full_n;
        else 
            len_x_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    len_x_2_din <= din_TDATA_int_regslice(39 downto 32);

    len_x_2_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            len_x_2_write <= ap_const_logic_1;
        else 
            len_x_2_write <= ap_const_logic_0;
        end if; 
    end process;


    len_x_3_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, len_x_3_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            len_x_3_blk_n <= len_x_3_full_n;
        else 
            len_x_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    len_x_3_din <= din_TDATA_int_regslice(55 downto 48);

    len_x_3_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            len_x_3_write <= ap_const_logic_1;
        else 
            len_x_3_write <= ap_const_logic_0;
        end if; 
    end process;


    len_x_4_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, len_x_4_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            len_x_4_blk_n <= len_x_4_full_n;
        else 
            len_x_4_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    len_x_4_din <= din_TDATA_int_regslice(71 downto 64);

    len_x_4_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            len_x_4_write <= ap_const_logic_1;
        else 
            len_x_4_write <= ap_const_logic_0;
        end if; 
    end process;


    len_x_5_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, len_x_5_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            len_x_5_blk_n <= len_x_5_full_n;
        else 
            len_x_5_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    len_x_5_din <= din_TDATA_int_regslice(87 downto 80);

    len_x_5_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            len_x_5_write <= ap_const_logic_1;
        else 
            len_x_5_write <= ap_const_logic_0;
        end if; 
    end process;


    len_x_6_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, len_x_6_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            len_x_6_blk_n <= len_x_6_full_n;
        else 
            len_x_6_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    len_x_6_din <= din_TDATA_int_regslice(103 downto 96);

    len_x_6_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            len_x_6_write <= ap_const_logic_1;
        else 
            len_x_6_write <= ap_const_logic_0;
        end if; 
    end process;


    len_x_7_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, len_x_7_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            len_x_7_blk_n <= len_x_7_full_n;
        else 
            len_x_7_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    len_x_7_din <= din_TDATA_int_regslice(119 downto 112);

    len_x_7_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            len_x_7_write <= ap_const_logic_1;
        else 
            len_x_7_write <= ap_const_logic_0;
        end if; 
    end process;


    len_x_8_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, len_x_8_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            len_x_8_blk_n <= len_x_8_full_n;
        else 
            len_x_8_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    len_x_8_din <= din_TDATA_int_regslice(135 downto 128);

    len_x_8_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            len_x_8_write <= ap_const_logic_1;
        else 
            len_x_8_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;

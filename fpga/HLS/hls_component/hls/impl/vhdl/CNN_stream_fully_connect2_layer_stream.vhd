-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CNN_stream_fully_connect2_layer_stream is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    feature2_embedding_dout : IN STD_LOGIC_VECTOR (1151 downto 0);
    feature2_embedding_empty_n : IN STD_LOGIC;
    feature2_embedding_read : OUT STD_LOGIC;
    feature2_embedding_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    feature2_embedding_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    fc2_embedding_0_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    fc2_embedding_0_full_n : IN STD_LOGIC;
    fc2_embedding_0_write : OUT STD_LOGIC;
    fc2_embedding_0_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    fc2_embedding_0_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    fc2_embedding_1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    fc2_embedding_1_full_n : IN STD_LOGIC;
    fc2_embedding_1_write : OUT STD_LOGIC;
    fc2_embedding_1_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    fc2_embedding_1_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0) );
end;


architecture behav of CNN_stream_fully_connect2_layer_stream is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_lv32_21F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv32_9D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011101";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_BE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_DC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011100";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111100";
    constant ap_const_lv32_11C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011100";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_13C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111100";
    constant ap_const_lv32_13E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111110";
    constant ap_const_lv32_15B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_15D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011101";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_17B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111011";
    constant ap_const_lv32_17D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111101";
    constant ap_const_lv32_19B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011011";
    constant ap_const_lv32_19D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011101";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1BB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111011";
    constant ap_const_lv32_1BE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111110";
    constant ap_const_lv32_1DB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011011";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1FB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111011";
    constant ap_const_lv32_21B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000011011";
    constant ap_const_lv32_220 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000100000";
    constant ap_const_lv32_23B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000111011";
    constant ap_const_lv32_23E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000111110";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal feature2_embedding_blk_n : STD_LOGIC;
    signal fc2_embedding_0_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal fc2_embedding_1_blk_n : STD_LOGIC;
    signal fe_fu_165_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal fe_reg_852 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal trunc_ln317_9_reg_857 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_862 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln324_16_fu_319_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln324_16_reg_867 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln324_1_fu_361_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln324_1_reg_872 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln324_2_fu_385_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln324_2_reg_877 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_51_reg_882 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln324_17_fu_419_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln324_17_reg_887 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_100_reg_892 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_101_reg_897 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln324_4_fu_487_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln324_4_reg_902 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln324_5_fu_529_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln324_5_reg_907 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln324_6_fu_571_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln324_6_reg_912 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln324_7_fu_613_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln324_7_reg_917 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln324_8_fu_637_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln324_8_reg_922 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_52_reg_927 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln324_20_fu_671_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln324_20_reg_932 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln324_21_fu_713_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln324_21_reg_937 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln324_1_fu_719_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln324_1_reg_942 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln324_2_fu_775_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln324_2_reg_947 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln324_6_fu_794_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln324_6_reg_952 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln324_15_fu_836_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln324_15_reg_957 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal tmp_94_fu_259_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_shl26_fu_269_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln317_1_fu_169_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_50_fu_283_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_95_fu_301_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_shl25_fu_311_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln317_2_fu_179_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_96_fu_325_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_97_fu_343_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_shl22_fu_335_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl23_fu_353_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_98_fu_367_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_shl20_fu_377_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln317_4_fu_189_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_99_fu_401_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_shl19_fu_411_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln317_5_fu_199_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_102_fu_445_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_103_fu_463_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_shl13_fu_455_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl14_fu_473_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln324_3_fu_481_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln317_7_fu_209_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_104_fu_493_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_105_fu_511_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_shl10_fu_503_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl11_fu_521_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_106_fu_535_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_107_fu_553_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_shl8_fu_545_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl9_fu_563_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_108_fu_577_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_109_fu_595_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_shl6_fu_587_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl7_fu_605_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_110_fu_619_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_shl5_fu_629_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln317_s_fu_229_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_111_fu_653_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_shl4_fu_663_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln317_3_fu_239_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_112_fu_677_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_113_fu_695_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_shl_fu_687_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl3_fu_705_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln324_fu_277_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln324_1_fu_293_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl17_fu_739_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl18_fu_746_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln_fu_725_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln324_fu_770_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln324_2_fu_732_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln324_4_fu_784_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln324_5_fu_789_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln324_3_fu_780_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln324_18_fu_753_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln324_19_fu_759_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln324_9_fu_805_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln324_8_fu_800_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln324_12_fu_820_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln324_3_fu_763_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln324_13_fu_824_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln324_11_fu_816_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln324_14_fu_830_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln324_10_fu_810_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln324_7_fu_842_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state3) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln324_15_reg_957 <= add_ln324_15_fu_836_p2;
                add_ln324_2_reg_947 <= add_ln324_2_fu_775_p2;
                add_ln324_6_reg_952 <= add_ln324_6_fu_794_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                add_ln324_16_reg_867 <= add_ln324_16_fu_319_p2;
                add_ln324_17_reg_887 <= add_ln324_17_fu_419_p2;
                add_ln324_1_reg_942 <= add_ln324_1_fu_719_p2;
                add_ln324_20_reg_932 <= add_ln324_20_fu_671_p2;
                    add_ln324_21_reg_937(31 downto 1) <= add_ln324_21_fu_713_p2(31 downto 1);
                fe_reg_852 <= fe_fu_165_p1;
                    sub_ln324_1_reg_872(31 downto 1) <= sub_ln324_1_fu_361_p2(31 downto 1);
                sub_ln324_2_reg_877 <= sub_ln324_2_fu_385_p2;
                sub_ln324_4_reg_902 <= sub_ln324_4_fu_487_p2;
                    sub_ln324_5_reg_907(31 downto 2) <= sub_ln324_5_fu_529_p2(31 downto 2);
                    sub_ln324_6_reg_912(31 downto 2) <= sub_ln324_6_fu_571_p2(31 downto 2);
                    sub_ln324_7_reg_917(31 downto 1) <= sub_ln324_7_fu_613_p2(31 downto 1);
                sub_ln324_8_reg_922 <= sub_ln324_8_fu_637_p2;
                tmp_100_reg_892 <= feature2_embedding_dout(316 downto 288);
                tmp_101_reg_897 <= feature2_embedding_dout(318 downto 288);
                tmp_51_reg_882 <= feature2_embedding_dout(252 downto 224);
                tmp_52_reg_927 <= feature2_embedding_dout(507 downto 480);
                tmp_reg_862 <= feature2_embedding_dout(62 downto 32);
                trunc_ln317_9_reg_857 <= feature2_embedding_dout(415 downto 384);
            end if;
        end if;
    end process;
    sub_ln324_1_reg_872(0) <= '0';
    sub_ln324_5_reg_907(1 downto 0) <= "00";
    sub_ln324_6_reg_912(1 downto 0) <= "00";
    sub_ln324_7_reg_917(0) <= '0';
    add_ln324_21_reg_937(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_block_state1, ap_block_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_boolean_0 = ap_block_state3) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln324_10_fu_810_p2 <= std_logic_vector(unsigned(add_ln324_9_fu_805_p2) + unsigned(add_ln324_8_fu_800_p2));
    add_ln324_11_fu_816_p2 <= std_logic_vector(unsigned(sub_ln324_7_reg_917) + unsigned(sub_ln324_8_reg_922));
    add_ln324_12_fu_820_p2 <= std_logic_vector(unsigned(add_ln324_20_reg_932) + unsigned(add_ln324_21_reg_937));
    add_ln324_13_fu_824_p2 <= std_logic_vector(unsigned(add_ln324_12_fu_820_p2) + unsigned(and_ln324_3_fu_763_p3));
    add_ln324_14_fu_830_p2 <= std_logic_vector(unsigned(add_ln324_13_fu_824_p2) + unsigned(add_ln324_11_fu_816_p2));
    add_ln324_15_fu_836_p2 <= std_logic_vector(unsigned(add_ln324_14_fu_830_p2) + unsigned(add_ln324_10_fu_810_p2));
    add_ln324_16_fu_319_p2 <= std_logic_vector(unsigned(p_shl25_fu_311_p3) + unsigned(trunc_ln317_2_fu_179_p4));
    add_ln324_17_fu_419_p2 <= std_logic_vector(unsigned(p_shl19_fu_411_p3) + unsigned(trunc_ln317_5_fu_199_p4));
    add_ln324_18_fu_753_p2 <= std_logic_vector(unsigned(p_shl17_fu_739_p3) + unsigned(p_shl18_fu_746_p3));
    add_ln324_19_fu_759_p2 <= std_logic_vector(unsigned(sub_ln324_6_reg_912) + unsigned(trunc_ln317_9_reg_857));
    add_ln324_1_fu_719_p2 <= std_logic_vector(unsigned(sub_ln324_fu_277_p2) + unsigned(and_ln324_1_fu_293_p3));
    add_ln324_20_fu_671_p2 <= std_logic_vector(unsigned(p_shl4_fu_663_p3) + unsigned(trunc_ln317_3_fu_239_p4));
    add_ln324_21_fu_713_p2 <= std_logic_vector(unsigned(p_shl_fu_687_p3) + unsigned(p_shl3_fu_705_p3));
    add_ln324_2_fu_775_p2 <= std_logic_vector(unsigned(add_ln324_1_reg_942) + unsigned(add_ln324_fu_770_p2));
    add_ln324_3_fu_780_p2 <= std_logic_vector(unsigned(add_ln324_16_reg_867) + unsigned(sub_ln324_1_reg_872));
    add_ln324_4_fu_784_p2 <= std_logic_vector(unsigned(and_ln324_2_fu_732_p3) + unsigned(add_ln324_17_reg_887));
    add_ln324_5_fu_789_p2 <= std_logic_vector(unsigned(add_ln324_4_fu_784_p2) + unsigned(sub_ln324_2_reg_877));
    add_ln324_6_fu_794_p2 <= std_logic_vector(unsigned(add_ln324_5_fu_789_p2) + unsigned(add_ln324_3_fu_780_p2));
    add_ln324_7_fu_842_p2 <= std_logic_vector(unsigned(add_ln324_6_reg_952) + unsigned(add_ln324_2_reg_947));
    add_ln324_8_fu_800_p2 <= std_logic_vector(unsigned(add_ln324_18_fu_753_p2) + unsigned(sub_ln324_4_reg_902));
    add_ln324_9_fu_805_p2 <= std_logic_vector(unsigned(sub_ln324_5_reg_907) + unsigned(add_ln324_19_fu_759_p2));
    add_ln324_fu_770_p2 <= std_logic_vector(unsigned(and_ln_fu_725_p3) + unsigned(fe_reg_852));
    and_ln324_1_fu_293_p3 <= (tmp_50_fu_283_p4 & ap_const_lv2_0);
    and_ln324_2_fu_732_p3 <= (tmp_51_reg_882 & ap_const_lv3_0);
    and_ln324_3_fu_763_p3 <= (tmp_52_reg_927 & ap_const_lv4_0);
    and_ln_fu_725_p3 <= (tmp_reg_862 & ap_const_lv1_0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(ap_block_state3)
    begin
        if ((ap_const_boolean_1 = ap_block_state3)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, feature2_embedding_empty_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (feature2_embedding_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state3_assign_proc : process(fc2_embedding_0_full_n, fc2_embedding_1_full_n)
    begin
                ap_block_state3 <= ((fc2_embedding_1_full_n = ap_const_logic_0) or (fc2_embedding_0_full_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state3, ap_block_state3)
    begin
        if (((ap_const_boolean_0 = ap_block_state3) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    fc2_embedding_0_blk_n_assign_proc : process(fc2_embedding_0_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fc2_embedding_0_blk_n <= fc2_embedding_0_full_n;
        else 
            fc2_embedding_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fc2_embedding_0_din <= std_logic_vector(unsigned(add_ln324_15_reg_957) + unsigned(add_ln324_7_fu_842_p2));

    fc2_embedding_0_write_assign_proc : process(ap_CS_fsm_state3, ap_block_state3)
    begin
        if (((ap_const_boolean_0 = ap_block_state3) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            fc2_embedding_0_write <= ap_const_logic_1;
        else 
            fc2_embedding_0_write <= ap_const_logic_0;
        end if; 
    end process;


    fc2_embedding_1_blk_n_assign_proc : process(fc2_embedding_1_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fc2_embedding_1_blk_n <= fc2_embedding_1_full_n;
        else 
            fc2_embedding_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fc2_embedding_1_din <= ap_const_lv32_0;

    fc2_embedding_1_write_assign_proc : process(ap_CS_fsm_state3, ap_block_state3)
    begin
        if (((ap_const_boolean_0 = ap_block_state3) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            fc2_embedding_1_write <= ap_const_logic_1;
        else 
            fc2_embedding_1_write <= ap_const_logic_0;
        end if; 
    end process;

    fe_fu_165_p1 <= feature2_embedding_dout(32 - 1 downto 0);

    feature2_embedding_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, feature2_embedding_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            feature2_embedding_blk_n <= feature2_embedding_empty_n;
        else 
            feature2_embedding_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    feature2_embedding_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            feature2_embedding_read <= ap_const_logic_1;
        else 
            feature2_embedding_read <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(ap_CS_fsm_state3, ap_block_state3)
    begin
        if (((ap_const_boolean_0 = ap_block_state3) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    p_shl10_fu_503_p3 <= (tmp_104_fu_493_p4 & ap_const_lv4_0);
    p_shl11_fu_521_p3 <= (tmp_105_fu_511_p4 & ap_const_lv2_0);
    p_shl13_fu_455_p3 <= (tmp_102_fu_445_p4 & ap_const_lv4_0);
    p_shl14_fu_473_p3 <= (tmp_103_fu_463_p4 & ap_const_lv2_0);
    p_shl17_fu_739_p3 <= (tmp_100_reg_892 & ap_const_lv3_0);
    p_shl18_fu_746_p3 <= (tmp_101_reg_897 & ap_const_lv1_0);
    p_shl19_fu_411_p3 <= (tmp_99_fu_401_p4 & ap_const_lv3_0);
    p_shl20_fu_377_p3 <= (tmp_98_fu_367_p4 & ap_const_lv3_0);
    p_shl22_fu_335_p3 <= (tmp_96_fu_325_p4 & ap_const_lv3_0);
    p_shl23_fu_353_p3 <= (tmp_97_fu_343_p4 & ap_const_lv1_0);
    p_shl25_fu_311_p3 <= (tmp_95_fu_301_p4 & ap_const_lv2_0);
    p_shl26_fu_269_p3 <= (tmp_94_fu_259_p4 & ap_const_lv2_0);
    p_shl3_fu_705_p3 <= (tmp_113_fu_695_p4 & ap_const_lv1_0);
    p_shl4_fu_663_p3 <= (tmp_111_fu_653_p4 & ap_const_lv4_0);
    p_shl5_fu_629_p3 <= (tmp_110_fu_619_p4 & ap_const_lv4_0);
    p_shl6_fu_587_p3 <= (tmp_108_fu_577_p4 & ap_const_lv4_0);
    p_shl7_fu_605_p3 <= (tmp_109_fu_595_p4 & ap_const_lv1_0);
    p_shl8_fu_545_p3 <= (tmp_106_fu_535_p4 & ap_const_lv4_0);
    p_shl9_fu_563_p3 <= (tmp_107_fu_553_p4 & ap_const_lv2_0);
    p_shl_fu_687_p3 <= (tmp_112_fu_677_p4 & ap_const_lv4_0);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln324_1_fu_361_p2 <= std_logic_vector(unsigned(p_shl22_fu_335_p3) - unsigned(p_shl23_fu_353_p3));
    sub_ln324_2_fu_385_p2 <= std_logic_vector(unsigned(p_shl20_fu_377_p3) - unsigned(trunc_ln317_4_fu_189_p4));
    sub_ln324_3_fu_481_p2 <= std_logic_vector(unsigned(p_shl13_fu_455_p3) - unsigned(p_shl14_fu_473_p3));
    sub_ln324_4_fu_487_p2 <= std_logic_vector(unsigned(sub_ln324_3_fu_481_p2) - unsigned(trunc_ln317_7_fu_209_p4));
    sub_ln324_5_fu_529_p2 <= std_logic_vector(unsigned(p_shl10_fu_503_p3) - unsigned(p_shl11_fu_521_p3));
    sub_ln324_6_fu_571_p2 <= std_logic_vector(unsigned(p_shl8_fu_545_p3) - unsigned(p_shl9_fu_563_p3));
    sub_ln324_7_fu_613_p2 <= std_logic_vector(unsigned(p_shl6_fu_587_p3) - unsigned(p_shl7_fu_605_p3));
    sub_ln324_8_fu_637_p2 <= std_logic_vector(unsigned(p_shl5_fu_629_p3) - unsigned(trunc_ln317_s_fu_229_p4));
    sub_ln324_fu_277_p2 <= std_logic_vector(unsigned(p_shl26_fu_269_p3) - unsigned(trunc_ln317_1_fu_169_p4));
    tmp_102_fu_445_p4 <= feature2_embedding_dout(347 downto 320);
    tmp_103_fu_463_p4 <= feature2_embedding_dout(349 downto 320);
    tmp_104_fu_493_p4 <= feature2_embedding_dout(379 downto 352);
    tmp_105_fu_511_p4 <= feature2_embedding_dout(381 downto 352);
    tmp_106_fu_535_p4 <= feature2_embedding_dout(411 downto 384);
    tmp_107_fu_553_p4 <= feature2_embedding_dout(413 downto 384);
    tmp_108_fu_577_p4 <= feature2_embedding_dout(443 downto 416);
    tmp_109_fu_595_p4 <= feature2_embedding_dout(446 downto 416);
    tmp_110_fu_619_p4 <= feature2_embedding_dout(475 downto 448);
    tmp_111_fu_653_p4 <= feature2_embedding_dout(539 downto 512);
    tmp_112_fu_677_p4 <= feature2_embedding_dout(571 downto 544);
    tmp_113_fu_695_p4 <= feature2_embedding_dout(574 downto 544);
    tmp_50_fu_283_p4 <= feature2_embedding_dout(125 downto 96);
    tmp_94_fu_259_p4 <= feature2_embedding_dout(93 downto 64);
    tmp_95_fu_301_p4 <= feature2_embedding_dout(157 downto 128);
    tmp_96_fu_325_p4 <= feature2_embedding_dout(188 downto 160);
    tmp_97_fu_343_p4 <= feature2_embedding_dout(190 downto 160);
    tmp_98_fu_367_p4 <= feature2_embedding_dout(220 downto 192);
    tmp_99_fu_401_p4 <= feature2_embedding_dout(284 downto 256);
    trunc_ln317_1_fu_169_p4 <= feature2_embedding_dout(95 downto 64);
    trunc_ln317_2_fu_179_p4 <= feature2_embedding_dout(159 downto 128);
    trunc_ln317_3_fu_239_p4 <= feature2_embedding_dout(543 downto 512);
    trunc_ln317_4_fu_189_p4 <= feature2_embedding_dout(223 downto 192);
    trunc_ln317_5_fu_199_p4 <= feature2_embedding_dout(287 downto 256);
    trunc_ln317_7_fu_209_p4 <= feature2_embedding_dout(351 downto 320);
    trunc_ln317_s_fu_229_p4 <= feature2_embedding_dout(479 downto 448);
end behav;

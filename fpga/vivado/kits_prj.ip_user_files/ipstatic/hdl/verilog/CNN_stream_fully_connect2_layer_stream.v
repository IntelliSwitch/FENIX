// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module CNN_stream_fully_connect2_layer_stream (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        feature2_embedding_dout,
        feature2_embedding_empty_n,
        feature2_embedding_read,
        feature2_embedding_num_data_valid,
        feature2_embedding_fifo_cap,
        fc2_embedding_0_din,
        fc2_embedding_0_full_n,
        fc2_embedding_0_write,
        fc2_embedding_0_num_data_valid,
        fc2_embedding_0_fifo_cap,
        fc2_embedding_1_din,
        fc2_embedding_1_full_n,
        fc2_embedding_1_write,
        fc2_embedding_1_num_data_valid,
        fc2_embedding_1_fifo_cap
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [1151:0] feature2_embedding_dout;
input   feature2_embedding_empty_n;
output   feature2_embedding_read;
input  [2:0] feature2_embedding_num_data_valid;
input  [2:0] feature2_embedding_fifo_cap;
output  [31:0] fc2_embedding_0_din;
input   fc2_embedding_0_full_n;
output   fc2_embedding_0_write;
input  [2:0] fc2_embedding_0_num_data_valid;
input  [2:0] fc2_embedding_0_fifo_cap;
output  [31:0] fc2_embedding_1_din;
input   fc2_embedding_1_full_n;
output   fc2_embedding_1_write;
input  [2:0] fc2_embedding_1_num_data_valid;
input  [2:0] fc2_embedding_1_fifo_cap;

reg ap_done;
reg ap_idle;
reg start_write;
reg feature2_embedding_read;
reg fc2_embedding_0_write;
reg fc2_embedding_1_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    feature2_embedding_blk_n;
reg    fc2_embedding_0_blk_n;
wire    ap_CS_fsm_state3;
reg    fc2_embedding_1_blk_n;
wire   [31:0] fe_fu_165_p1;
reg   [31:0] fe_reg_852;
reg    ap_block_state1;
reg   [31:0] trunc_ln317_9_reg_857;
reg   [30:0] tmp_reg_862;
wire   [31:0] add_ln324_16_fu_319_p2;
reg   [31:0] add_ln324_16_reg_867;
wire   [31:0] sub_ln324_1_fu_361_p2;
reg   [31:0] sub_ln324_1_reg_872;
wire   [31:0] sub_ln324_2_fu_385_p2;
reg   [31:0] sub_ln324_2_reg_877;
reg   [28:0] tmp_51_reg_882;
wire   [31:0] add_ln324_17_fu_419_p2;
reg   [31:0] add_ln324_17_reg_887;
reg   [28:0] tmp_100_reg_892;
reg   [30:0] tmp_101_reg_897;
wire   [31:0] sub_ln324_4_fu_487_p2;
reg   [31:0] sub_ln324_4_reg_902;
wire   [31:0] sub_ln324_5_fu_529_p2;
reg   [31:0] sub_ln324_5_reg_907;
wire   [31:0] sub_ln324_6_fu_571_p2;
reg   [31:0] sub_ln324_6_reg_912;
wire   [31:0] sub_ln324_7_fu_613_p2;
reg   [31:0] sub_ln324_7_reg_917;
wire   [31:0] sub_ln324_8_fu_637_p2;
reg   [31:0] sub_ln324_8_reg_922;
reg   [27:0] tmp_52_reg_927;
wire   [31:0] add_ln324_20_fu_671_p2;
reg   [31:0] add_ln324_20_reg_932;
wire   [31:0] add_ln324_21_fu_713_p2;
reg   [31:0] add_ln324_21_reg_937;
wire   [31:0] add_ln324_1_fu_719_p2;
reg   [31:0] add_ln324_1_reg_942;
wire   [31:0] add_ln324_2_fu_775_p2;
reg   [31:0] add_ln324_2_reg_947;
wire    ap_CS_fsm_state2;
wire   [31:0] add_ln324_6_fu_794_p2;
reg   [31:0] add_ln324_6_reg_952;
wire   [31:0] add_ln324_15_fu_836_p2;
reg   [31:0] add_ln324_15_reg_957;
reg    ap_block_state3;
wire   [29:0] tmp_94_fu_259_p4;
wire   [31:0] p_shl26_fu_269_p3;
wire   [31:0] trunc_ln317_1_fu_169_p4;
wire   [29:0] tmp_50_fu_283_p4;
wire   [29:0] tmp_95_fu_301_p4;
wire   [31:0] p_shl25_fu_311_p3;
wire   [31:0] trunc_ln317_2_fu_179_p4;
wire   [28:0] tmp_96_fu_325_p4;
wire   [30:0] tmp_97_fu_343_p4;
wire   [31:0] p_shl22_fu_335_p3;
wire   [31:0] p_shl23_fu_353_p3;
wire   [28:0] tmp_98_fu_367_p4;
wire   [31:0] p_shl20_fu_377_p3;
wire   [31:0] trunc_ln317_4_fu_189_p4;
wire   [28:0] tmp_99_fu_401_p4;
wire   [31:0] p_shl19_fu_411_p3;
wire   [31:0] trunc_ln317_5_fu_199_p4;
wire   [27:0] tmp_102_fu_445_p4;
wire   [29:0] tmp_103_fu_463_p4;
wire   [31:0] p_shl13_fu_455_p3;
wire   [31:0] p_shl14_fu_473_p3;
wire   [31:0] sub_ln324_3_fu_481_p2;
wire   [31:0] trunc_ln317_7_fu_209_p4;
wire   [27:0] tmp_104_fu_493_p4;
wire   [29:0] tmp_105_fu_511_p4;
wire   [31:0] p_shl10_fu_503_p3;
wire   [31:0] p_shl11_fu_521_p3;
wire   [27:0] tmp_106_fu_535_p4;
wire   [29:0] tmp_107_fu_553_p4;
wire   [31:0] p_shl8_fu_545_p3;
wire   [31:0] p_shl9_fu_563_p3;
wire   [27:0] tmp_108_fu_577_p4;
wire   [30:0] tmp_109_fu_595_p4;
wire   [31:0] p_shl6_fu_587_p3;
wire   [31:0] p_shl7_fu_605_p3;
wire   [27:0] tmp_110_fu_619_p4;
wire   [31:0] p_shl5_fu_629_p3;
wire   [31:0] trunc_ln317_s_fu_229_p4;
wire   [27:0] tmp_111_fu_653_p4;
wire   [31:0] p_shl4_fu_663_p3;
wire   [31:0] trunc_ln317_3_fu_239_p4;
wire   [27:0] tmp_112_fu_677_p4;
wire   [30:0] tmp_113_fu_695_p4;
wire   [31:0] p_shl_fu_687_p3;
wire   [31:0] p_shl3_fu_705_p3;
wire   [31:0] sub_ln324_fu_277_p2;
wire   [31:0] and_ln324_1_fu_293_p3;
wire   [31:0] p_shl17_fu_739_p3;
wire   [31:0] p_shl18_fu_746_p3;
wire   [31:0] and_ln_fu_725_p3;
wire   [31:0] add_ln324_fu_770_p2;
wire   [31:0] and_ln324_2_fu_732_p3;
wire   [31:0] add_ln324_4_fu_784_p2;
wire   [31:0] add_ln324_5_fu_789_p2;
wire   [31:0] add_ln324_3_fu_780_p2;
wire   [31:0] add_ln324_18_fu_753_p2;
wire   [31:0] add_ln324_19_fu_759_p2;
wire   [31:0] add_ln324_9_fu_805_p2;
wire   [31:0] add_ln324_8_fu_800_p2;
wire   [31:0] add_ln324_12_fu_820_p2;
wire   [31:0] and_ln324_3_fu_763_p3;
wire   [31:0] add_ln324_13_fu_824_p2;
wire   [31:0] add_ln324_11_fu_816_p2;
wire   [31:0] add_ln324_14_fu_830_p2;
wire   [31:0] add_ln324_10_fu_810_p2;
wire   [31:0] add_ln324_7_fu_842_p2;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state3) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln324_15_reg_957 <= add_ln324_15_fu_836_p2;
        add_ln324_2_reg_947 <= add_ln324_2_fu_775_p2;
        add_ln324_6_reg_952 <= add_ln324_6_fu_794_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln324_16_reg_867 <= add_ln324_16_fu_319_p2;
        add_ln324_17_reg_887 <= add_ln324_17_fu_419_p2;
        add_ln324_1_reg_942 <= add_ln324_1_fu_719_p2;
        add_ln324_20_reg_932 <= add_ln324_20_fu_671_p2;
        add_ln324_21_reg_937[31 : 1] <= add_ln324_21_fu_713_p2[31 : 1];
        fe_reg_852 <= fe_fu_165_p1;
        sub_ln324_1_reg_872[31 : 1] <= sub_ln324_1_fu_361_p2[31 : 1];
        sub_ln324_2_reg_877 <= sub_ln324_2_fu_385_p2;
        sub_ln324_4_reg_902 <= sub_ln324_4_fu_487_p2;
        sub_ln324_5_reg_907[31 : 2] <= sub_ln324_5_fu_529_p2[31 : 2];
        sub_ln324_6_reg_912[31 : 2] <= sub_ln324_6_fu_571_p2[31 : 2];
        sub_ln324_7_reg_917[31 : 1] <= sub_ln324_7_fu_613_p2[31 : 1];
        sub_ln324_8_reg_922 <= sub_ln324_8_fu_637_p2;
        tmp_100_reg_892 <= {{feature2_embedding_dout[316:288]}};
        tmp_101_reg_897 <= {{feature2_embedding_dout[318:288]}};
        tmp_51_reg_882 <= {{feature2_embedding_dout[252:224]}};
        tmp_52_reg_927 <= {{feature2_embedding_dout[507:480]}};
        tmp_reg_862 <= {{feature2_embedding_dout[62:32]}};
        trunc_ln317_9_reg_857 <= {{feature2_embedding_dout[415:384]}};
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state3)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fc2_embedding_0_blk_n = fc2_embedding_0_full_n;
    end else begin
        fc2_embedding_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3) & (1'b1 == ap_CS_fsm_state3))) begin
        fc2_embedding_0_write = 1'b1;
    end else begin
        fc2_embedding_0_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fc2_embedding_1_blk_n = fc2_embedding_1_full_n;
    end else begin
        fc2_embedding_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3) & (1'b1 == ap_CS_fsm_state3))) begin
        fc2_embedding_1_write = 1'b1;
    end else begin
        fc2_embedding_1_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        feature2_embedding_blk_n = feature2_embedding_empty_n;
    end else begin
        feature2_embedding_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        feature2_embedding_read = 1'b1;
    end else begin
        feature2_embedding_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3) & (1'b1 == ap_CS_fsm_state3))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b0 == ap_block_state3) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln324_10_fu_810_p2 = (add_ln324_9_fu_805_p2 + add_ln324_8_fu_800_p2);

assign add_ln324_11_fu_816_p2 = (sub_ln324_7_reg_917 + sub_ln324_8_reg_922);

assign add_ln324_12_fu_820_p2 = (add_ln324_20_reg_932 + add_ln324_21_reg_937);

assign add_ln324_13_fu_824_p2 = (add_ln324_12_fu_820_p2 + and_ln324_3_fu_763_p3);

assign add_ln324_14_fu_830_p2 = (add_ln324_13_fu_824_p2 + add_ln324_11_fu_816_p2);

assign add_ln324_15_fu_836_p2 = (add_ln324_14_fu_830_p2 + add_ln324_10_fu_810_p2);

assign add_ln324_16_fu_319_p2 = (p_shl25_fu_311_p3 + trunc_ln317_2_fu_179_p4);

assign add_ln324_17_fu_419_p2 = (p_shl19_fu_411_p3 + trunc_ln317_5_fu_199_p4);

assign add_ln324_18_fu_753_p2 = (p_shl17_fu_739_p3 + p_shl18_fu_746_p3);

assign add_ln324_19_fu_759_p2 = (sub_ln324_6_reg_912 + trunc_ln317_9_reg_857);

assign add_ln324_1_fu_719_p2 = (sub_ln324_fu_277_p2 + and_ln324_1_fu_293_p3);

assign add_ln324_20_fu_671_p2 = (p_shl4_fu_663_p3 + trunc_ln317_3_fu_239_p4);

assign add_ln324_21_fu_713_p2 = (p_shl_fu_687_p3 + p_shl3_fu_705_p3);

assign add_ln324_2_fu_775_p2 = (add_ln324_1_reg_942 + add_ln324_fu_770_p2);

assign add_ln324_3_fu_780_p2 = (add_ln324_16_reg_867 + sub_ln324_1_reg_872);

assign add_ln324_4_fu_784_p2 = (and_ln324_2_fu_732_p3 + add_ln324_17_reg_887);

assign add_ln324_5_fu_789_p2 = (add_ln324_4_fu_784_p2 + sub_ln324_2_reg_877);

assign add_ln324_6_fu_794_p2 = (add_ln324_5_fu_789_p2 + add_ln324_3_fu_780_p2);

assign add_ln324_7_fu_842_p2 = (add_ln324_6_reg_952 + add_ln324_2_reg_947);

assign add_ln324_8_fu_800_p2 = (add_ln324_18_fu_753_p2 + sub_ln324_4_reg_902);

assign add_ln324_9_fu_805_p2 = (sub_ln324_5_reg_907 + add_ln324_19_fu_759_p2);

assign add_ln324_fu_770_p2 = (and_ln_fu_725_p3 + fe_reg_852);

assign and_ln324_1_fu_293_p3 = {{tmp_50_fu_283_p4}, {2'd0}};

assign and_ln324_2_fu_732_p3 = {{tmp_51_reg_882}, {3'd0}};

assign and_ln324_3_fu_763_p3 = {{tmp_52_reg_927}, {4'd0}};

assign and_ln_fu_725_p3 = {{tmp_reg_862}, {1'd0}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (feature2_embedding_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state3 = ((fc2_embedding_1_full_n == 1'b0) | (fc2_embedding_0_full_n == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign fc2_embedding_0_din = (add_ln324_15_reg_957 + add_ln324_7_fu_842_p2);

assign fc2_embedding_1_din = 32'd0;

assign fe_fu_165_p1 = feature2_embedding_dout[31:0];

assign p_shl10_fu_503_p3 = {{tmp_104_fu_493_p4}, {4'd0}};

assign p_shl11_fu_521_p3 = {{tmp_105_fu_511_p4}, {2'd0}};

assign p_shl13_fu_455_p3 = {{tmp_102_fu_445_p4}, {4'd0}};

assign p_shl14_fu_473_p3 = {{tmp_103_fu_463_p4}, {2'd0}};

assign p_shl17_fu_739_p3 = {{tmp_100_reg_892}, {3'd0}};

assign p_shl18_fu_746_p3 = {{tmp_101_reg_897}, {1'd0}};

assign p_shl19_fu_411_p3 = {{tmp_99_fu_401_p4}, {3'd0}};

assign p_shl20_fu_377_p3 = {{tmp_98_fu_367_p4}, {3'd0}};

assign p_shl22_fu_335_p3 = {{tmp_96_fu_325_p4}, {3'd0}};

assign p_shl23_fu_353_p3 = {{tmp_97_fu_343_p4}, {1'd0}};

assign p_shl25_fu_311_p3 = {{tmp_95_fu_301_p4}, {2'd0}};

assign p_shl26_fu_269_p3 = {{tmp_94_fu_259_p4}, {2'd0}};

assign p_shl3_fu_705_p3 = {{tmp_113_fu_695_p4}, {1'd0}};

assign p_shl4_fu_663_p3 = {{tmp_111_fu_653_p4}, {4'd0}};

assign p_shl5_fu_629_p3 = {{tmp_110_fu_619_p4}, {4'd0}};

assign p_shl6_fu_587_p3 = {{tmp_108_fu_577_p4}, {4'd0}};

assign p_shl7_fu_605_p3 = {{tmp_109_fu_595_p4}, {1'd0}};

assign p_shl8_fu_545_p3 = {{tmp_106_fu_535_p4}, {4'd0}};

assign p_shl9_fu_563_p3 = {{tmp_107_fu_553_p4}, {2'd0}};

assign p_shl_fu_687_p3 = {{tmp_112_fu_677_p4}, {4'd0}};

assign start_out = real_start;

assign sub_ln324_1_fu_361_p2 = (p_shl22_fu_335_p3 - p_shl23_fu_353_p3);

assign sub_ln324_2_fu_385_p2 = (p_shl20_fu_377_p3 - trunc_ln317_4_fu_189_p4);

assign sub_ln324_3_fu_481_p2 = (p_shl13_fu_455_p3 - p_shl14_fu_473_p3);

assign sub_ln324_4_fu_487_p2 = (sub_ln324_3_fu_481_p2 - trunc_ln317_7_fu_209_p4);

assign sub_ln324_5_fu_529_p2 = (p_shl10_fu_503_p3 - p_shl11_fu_521_p3);

assign sub_ln324_6_fu_571_p2 = (p_shl8_fu_545_p3 - p_shl9_fu_563_p3);

assign sub_ln324_7_fu_613_p2 = (p_shl6_fu_587_p3 - p_shl7_fu_605_p3);

assign sub_ln324_8_fu_637_p2 = (p_shl5_fu_629_p3 - trunc_ln317_s_fu_229_p4);

assign sub_ln324_fu_277_p2 = (p_shl26_fu_269_p3 - trunc_ln317_1_fu_169_p4);

assign tmp_102_fu_445_p4 = {{feature2_embedding_dout[347:320]}};

assign tmp_103_fu_463_p4 = {{feature2_embedding_dout[349:320]}};

assign tmp_104_fu_493_p4 = {{feature2_embedding_dout[379:352]}};

assign tmp_105_fu_511_p4 = {{feature2_embedding_dout[381:352]}};

assign tmp_106_fu_535_p4 = {{feature2_embedding_dout[411:384]}};

assign tmp_107_fu_553_p4 = {{feature2_embedding_dout[413:384]}};

assign tmp_108_fu_577_p4 = {{feature2_embedding_dout[443:416]}};

assign tmp_109_fu_595_p4 = {{feature2_embedding_dout[446:416]}};

assign tmp_110_fu_619_p4 = {{feature2_embedding_dout[475:448]}};

assign tmp_111_fu_653_p4 = {{feature2_embedding_dout[539:512]}};

assign tmp_112_fu_677_p4 = {{feature2_embedding_dout[571:544]}};

assign tmp_113_fu_695_p4 = {{feature2_embedding_dout[574:544]}};

assign tmp_50_fu_283_p4 = {{feature2_embedding_dout[125:96]}};

assign tmp_94_fu_259_p4 = {{feature2_embedding_dout[93:64]}};

assign tmp_95_fu_301_p4 = {{feature2_embedding_dout[157:128]}};

assign tmp_96_fu_325_p4 = {{feature2_embedding_dout[188:160]}};

assign tmp_97_fu_343_p4 = {{feature2_embedding_dout[190:160]}};

assign tmp_98_fu_367_p4 = {{feature2_embedding_dout[220:192]}};

assign tmp_99_fu_401_p4 = {{feature2_embedding_dout[284:256]}};

assign trunc_ln317_1_fu_169_p4 = {{feature2_embedding_dout[95:64]}};

assign trunc_ln317_2_fu_179_p4 = {{feature2_embedding_dout[159:128]}};

assign trunc_ln317_3_fu_239_p4 = {{feature2_embedding_dout[543:512]}};

assign trunc_ln317_4_fu_189_p4 = {{feature2_embedding_dout[223:192]}};

assign trunc_ln317_5_fu_199_p4 = {{feature2_embedding_dout[287:256]}};

assign trunc_ln317_7_fu_209_p4 = {{feature2_embedding_dout[351:320]}};

assign trunc_ln317_s_fu_229_p4 = {{feature2_embedding_dout[479:448]}};

always @ (posedge ap_clk) begin
    sub_ln324_1_reg_872[0] <= 1'b0;
    sub_ln324_5_reg_907[1:0] <= 2'b00;
    sub_ln324_6_reg_912[1:0] <= 2'b00;
    sub_ln324_7_reg_917[0] <= 1'b0;
    add_ln324_21_reg_937[0] <= 1'b0;
end

endmodule //CNN_stream_fully_connect2_layer_stream

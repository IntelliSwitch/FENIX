# GENETARED BY NNDCT, DO NOT EDIT!

import torch
from torch import tensor
import pytorch_nndct as py_nndct

class TextCNN1(py_nndct.nn.NndctQuantModel):
    def __init__(self):
        super(TextCNN1, self).__init__()
        self.module_0 = py_nndct.nn.Input() #TextCNN1::input_0(TextCNN1::nndct_input_0)
        self.module_1 = py_nndct.nn.strided_slice() #TextCNN1::TextCNN1/675(TextCNN1::nndct_strided_slice_1)
        self.module_2 = py_nndct.nn.Module('nndct_select') #TextCNN1::TextCNN1/ret.3(TextCNN1::nndct_select_2)
        self.module_3 = py_nndct.nn.Module('nndct_cast') #TextCNN1::TextCNN1/692(TextCNN1::nndct_cast_3)
        self.module_4 = py_nndct.nn.strided_slice() #TextCNN1::TextCNN1/697(TextCNN1::nndct_strided_slice_4)
        self.module_5 = py_nndct.nn.Module('nndct_select') #TextCNN1::TextCNN1/ret.5(TextCNN1::nndct_select_5)
        self.module_6 = py_nndct.nn.Module('nndct_cast') #TextCNN1::TextCNN1/714(TextCNN1::nndct_cast_6)
        self.module_7 = py_nndct.nn.Module('nndct_cast') #TextCNN1::TextCNN1/722(TextCNN1::nndct_cast_7)
        self.module_8 = py_nndct.nn.Module('nndct_cast') #TextCNN1::TextCNN1/727(TextCNN1::nndct_cast_8)
        self.module_9 = py_nndct.nn.Module('nndct_cast') #TextCNN1::TextCNN1/735(TextCNN1::nndct_cast_9)
        self.module_10 = py_nndct.nn.Module('nndct_cast') #TextCNN1::TextCNN1/740(TextCNN1::nndct_cast_10)
        self.module_11 = py_nndct.nn.embedding(num_embeddings=1501, embedding_dim=10, padding_idx=-1) #TextCNN1::TextCNN1/Embedding[len_embedding]/ret.7(TextCNN1::nndct_embedding_11)
        self.module_12 = py_nndct.nn.embedding(num_embeddings=2561, embedding_dim=8, padding_idx=-1) #TextCNN1::TextCNN1/Embedding[ipd_embedding]/ret.9(TextCNN1::nndct_embedding_12)
        self.module_13 = py_nndct.nn.Module('nndct_shape') #TextCNN1::TextCNN1/752(TextCNN1::nndct_shape_13)
        self.module_14 = py_nndct.nn.Cat() #TextCNN1::TextCNN1/ret.11(TextCNN1::nndct_concat_14)
        self.module_15 = py_nndct.nn.Linear(in_features=18, out_features=4, bias=True) #TextCNN1::TextCNN1/Linear[fc1]/ret.13(TextCNN1::nndct_dense_15)
        self.module_16 = py_nndct.nn.Module('nndct_reshape') #TextCNN1::TextCNN1/ret.15(TextCNN1::nndct_reshape_16)
        self.module_17 = py_nndct.nn.Module('nndct_shape') #TextCNN1::TextCNN1/779(TextCNN1::nndct_shape_17)
        self.module_18 = py_nndct.nn.Module('nndct_shape') #TextCNN1::TextCNN1/795(TextCNN1::nndct_shape_18)
        self.module_19 = py_nndct.nn.Module('nndct_shape') #TextCNN1::TextCNN1/811(TextCNN1::nndct_shape_19)
        self.module_20 = py_nndct.nn.Module('nndct_reshape') #TextCNN1::TextCNN1/ret.17(TextCNN1::nndct_reshape_20)
        self.module_21 = py_nndct.nn.Conv2d(in_channels=1, out_channels=4, kernel_size=[3, 4], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #TextCNN1::TextCNN1/Conv2d[conv3]/ret.19(TextCNN1::nndct_conv2d_21)
        self.module_22 = py_nndct.nn.ReLU(inplace=False) #TextCNN1::TextCNN1/ret.21(TextCNN1::nndct_relu_22)
        self.module_23 = py_nndct.nn.Conv2d(in_channels=1, out_channels=4, kernel_size=[4, 4], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #TextCNN1::TextCNN1/Conv2d[conv4]/ret.23(TextCNN1::nndct_conv2d_23)
        self.module_24 = py_nndct.nn.ReLU(inplace=False) #TextCNN1::TextCNN1/ret.25(TextCNN1::nndct_relu_24)
        self.module_25 = py_nndct.nn.Conv2d(in_channels=1, out_channels=4, kernel_size=[5, 4], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #TextCNN1::TextCNN1/Conv2d[conv5]/ret.27(TextCNN1::nndct_conv2d_25)
        self.module_26 = py_nndct.nn.ReLU(inplace=False) #TextCNN1::TextCNN1/ret.29(TextCNN1::nndct_relu_26)
        self.module_27 = py_nndct.nn.Module('nndct_reshape') #TextCNN1::TextCNN1/ret.31(TextCNN1::nndct_reshape_27)
        self.module_28 = py_nndct.nn.Module('nndct_reshape') #TextCNN1::TextCNN1/ret.33(TextCNN1::nndct_reshape_28)
        self.module_29 = py_nndct.nn.Module('nndct_reshape') #TextCNN1::TextCNN1/ret.35(TextCNN1::nndct_reshape_29)
        self.module_30 = py_nndct.nn.Cat() #TextCNN1::TextCNN1/ret.37(TextCNN1::nndct_concat_30)
        self.module_31 = py_nndct.nn.Module('nndct_reshape') #TextCNN1::TextCNN1/ret.39(TextCNN1::nndct_reshape_31)
        self.module_32 = py_nndct.nn.Linear(in_features=72, out_features=7, bias=True) #TextCNN1::TextCNN1/Linear[fc2]/ret.41(TextCNN1::nndct_dense_32)
        self.module_33 = py_nndct.nn.Module('nndct_reshape') #TextCNN1::TextCNN1/ret.43(TextCNN1::nndct_reshape_33)
        self.module_34 = py_nndct.nn.Module('nndct_squeeze') #TextCNN1::TextCNN1/ret.45(TextCNN1::nndct_squeeze_34)
        self.module_35 = py_nndct.nn.BatchNorm(num_features=7, eps=0.0, momentum=0.1) #TextCNN1::TextCNN1/BatchNorm1d[bn_logits]/ret.47(TextCNN1::nndct_batch_norm_35)
        self.module_36 = py_nndct.nn.LogSoftmax(dim=1) #TextCNN1::TextCNN1/ret(TextCNN1::nndct_log_softmax_36)

    @py_nndct.nn.forward_processor
    def forward(self, *args):
        output_module_0 = self.module_0(input=args[0])
        output_module_1 = self.module_1(input=output_module_0, dim=[0,1], start=[0,0], end=[9223372036854775807,9223372036854775807], step=[1,1])
        output_module_1 = self.module_2(input=output_module_1, dim=2, index=0)
        output_module_1 = self.module_3(input=output_module_1, dtype=torch.int64, device='cpu', non_blocking=False, copy=False)
        output_module_4 = self.module_4(input=output_module_0, dim=[0,1], start=[0,0], end=[9223372036854775807,9223372036854775807], step=[1,1])
        output_module_4 = self.module_5(input=output_module_4, dim=2, index=1)
        output_module_4 = self.module_6(input=output_module_4, dtype=torch.int64, device='cpu', non_blocking=False, copy=False)
        output_module_1 = self.module_7(input=output_module_1, dtype=torch.int64, device='cpu', non_blocking=False, copy=False)
        output_module_1 = self.module_8(input=output_module_1, dtype=torch.int64, non_blocking=False, copy=False)
        output_module_4 = self.module_9(input=output_module_4, dtype=torch.int64, device='cpu', non_blocking=False, copy=False)
        output_module_4 = self.module_10(input=output_module_4, dtype=torch.int64, non_blocking=False, copy=False)
        output_module_1 = self.module_11(output_module_1)
        output_module_4 = self.module_12(output_module_4)
        output_module_13 = self.module_13(input=output_module_0, dim=0)
        output_module_1 = self.module_14(dim=-1, tensors=[output_module_1,output_module_4])
        output_module_1 = self.module_15(output_module_1)
        output_module_16 = self.module_16(input=output_module_1, shape=[output_module_13,-1])
        output_module_17 = self.module_17(input=output_module_1, dim=0)
        output_module_18 = self.module_18(input=output_module_1, dim=1)
        output_module_19 = self.module_19(input=output_module_1, dim=2)
        output_module_20 = self.module_20(input=output_module_1, shape=[output_module_17,1,output_module_18,output_module_19])
        output_module_21 = self.module_21(output_module_20)
        output_module_21 = self.module_22(output_module_21)
        output_module_23 = self.module_23(output_module_20)
        output_module_23 = self.module_24(output_module_23)
        output_module_25 = self.module_25(output_module_20)
        output_module_25 = self.module_26(output_module_25)
        output_module_21 = self.module_27(input=output_module_21, shape=[output_module_13,-1])
        output_module_23 = self.module_28(input=output_module_23, shape=[output_module_13,-1])
        output_module_25 = self.module_29(input=output_module_25, shape=[output_module_13,-1])
        output_module_21 = self.module_30(dim=-1, tensors=[output_module_21,output_module_23,output_module_25])
        output_module_21 = self.module_31(input=output_module_21, shape=[output_module_13,1,-1])
        output_module_21 = self.module_32(output_module_21)
        output_module_21 = self.module_33(input=output_module_21, shape=[-1,7])
        output_module_21 = self.module_34(input=output_module_21, dim=1)
        output_module_21 = self.module_35(output_module_21)
        output_module_21 = self.module_36(output_module_21)
        return (output_module_21,output_module_16)
